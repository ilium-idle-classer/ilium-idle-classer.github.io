{"version":3,"sources":["game/modifiers/allModifiers.tsx","game/loopFunctions/battle/battleEntityAttack.tsx","game/loopFunctions/battle/battleOver.tsx","game/battle/bosses/allBosses.tsx","game/stats/statsEnum.tsx","game/battle/battleEntity.tsx","game/battle/battlePlayer.tsx","game/battle/boss.tsx","game/battle/bosses/brute.tsx","game/battle/bosses/spectre.tsx","game/battle/bosses/iniitializeBoss.tsx","game/battle/battle.tsx","game/battle/bosses/bossFightOrder.tsx","game/history/history.tsx","game/modifiers/modifier.tsx","game/modifiers/modifierManager.tsx","game/stats/stats.tsx","game/classes/allClasses.tsx","game/unlockables/unlockRequirementTypes.tsx","game/unlockables/unlockRequirement.tsx","game/unlockables/bossDefeatedRequirement.tsx","game/unlockables/classLevelRequirement.tsx","game/unlockables/playerLevelRequirement.tsx","game/unlockables/prestigeCountRequirement.tsx","game/unlockables/statMinimumsRequirement.tsx","game/unlockables/loadUnlockRequirements.tsx","game/zones/allZones.tsx","game/classes/class.tsx","game/classes/baseClasses/bardPlayerClass.tsx","game/classes/baseClasses/defenderPlayerClass.tsx","game/classes/baseClasses/healerPlayerClass.tsx","game/classes/baseClasses/magePlayerClass.tsx","game/classes/baseClasses/roguePlayerClass.tsx","game/classes/baseClasses/warriorPlayerClass.tsx","game/classes/tierOneClasses/archerPlayerClass.tsx","game/classes/tierOneClasses/clericPlayerClass.tsx","game/classes/tierOneClasses/dancerPlayerClass.tsx","game/classes/tierOneClasses/fighterPlayerClass.tsx","game/classes/tierOneClasses/monkPlayerClass.tsx","game/classes/tierOneClasses/soldierPlayerClass.tsx","game/classes/tierOneClasses/wizardPlayerClass.tsx","game/classes/allClassesInitialized.tsx","game/player/classModifier.tsx","game/prestige/allPrestigeSkills.tsx","game/zones/zone.tsx","game/zones/baseZones/strawberryValleyFieldsZone.tsx","game/zones/tierOneZones/berryRidgeRangeZone.tsx","game/zones/tierOneZones/oldStoneFarmZone.tsx","game/zones/tierOneZones/quietSandsZone.tsx","game/zones/tierOneZones/smallPawsAcresZone.tsx","game/zones/allZonesInitialized.tsx","game/player/zoneModifier.tsx","game/player/player.tsx","game/storage/state/initialDiscoveredZones.tsx","game/storage/state/initialPlayerStats.tsx","game/storage/state/initialUnlockedClasses.tsx","game/storage/state/initialPlayer.tsx","game/prestige/prestigeSkill.tsx","game/prestige/prestigeSkills/improvedLearning.tsx","game/prestige/prestigeSkills/improvedTraining.tsx","game/prestige/prestigeSkills/improvedConsolidating.tsx","game/prestige/prestigeSkills/prestigeSkillCreator.tsx","game/prestige/prestige.tsx","game/gameState.tsx","game/storage/state/initialGameState.tsx","ui/gameContext.tsx","ui/components/gameLoopProgress.tsx","ui/helpers/capitalizeAndAddSpacing.tsx","ui/bossBattle.tsx","ui/classPicker.tsx","ui/prestigeActivation.tsx","game/storage/saveGame.tsx","game/storage/loadGame.tsx","game/storage/clearSavedGame.tsx","ui/settingsPanel.tsx","ui/statsViewer.tsx","game/loopFunctions/zones/gainRewards.tsx","ui/zonePicker.tsx","ui/pageLayout.tsx","game/unlockables/meetsAllUnlockRequirements.tsx","game/prestige/prestigeSkills/allPrestigeSkillsInitialized.tsx","game/loopFunctions/unlockables/allUnlockables.tsx","game/loopFunctions/unlockables/unlockClasses.tsx","game/loopFunctions/unlockables/unlockZones.tsx","game/loopFunctions/unlockables/unlockPrestigeSkills.tsx","game/loopFunctions/storage/saveGame.tsx","App.tsx","useInterval.js","reportWebVitals.ts","index.tsx"],"names":["AllModifiers","PLAYER_ATTACK_LOOP_ID","BOSS_ATTACK_LOOP_ID","playerAttackLoopFunction","data","battle","gameState","playerAttack","bossAttackLoopFunction","bossAttack","BATTLE_OVER_LOOP_ID","battleOverLoopFunction","player","isDefeated","stopBattle","boss","prestigePointGain","modifierManager","modifyDecimal","prestigePoints","prestige","addPoints","lastBossDefeated","id","history","addDefeatedBoss","gainRewards","removeSubscriptions","undefined","AllBosses","StatTypes","BattleEntity","hp","attackValue","defenseValue","bonusDamage","attackInterval","this","Decimal","plus","div","target","max","minus","eq","BattlePlayer","stats","get","attackStat","defenseStat","Boss","name","playerAttackStat","playerDefenseStat","Brute","brute","strength","toughness","Spectre","spectre","wisdom","charisma","initializeBoss","bossId","Error","Battle","addLoopSubscription","attack","bossFightOrder","History","bossesDefeated","defeatedBossCount","Modifier","group","additiveValue","multiplicativeValue","gains","addToStatGains","multiplyStatGains","addToGain","multiplyGain","toNumber","statGains","multiplyAllStatsValue","addAllStatsValue","gain","times","add","ModifierManager","permanentModifiers","temporaryModifiers","loadModifiers","modifierType","output","temporarytModifiers","modifyStats","modifyNumber","modifier","modifierGroup","alreadyHasModifier","findIndex","modifierItem","push","addModifierToModifierGroup","modifierMapData","key","modifierData","map","dexterity","intelligence","AllClasses","Stats","incrementalStats","multiplier","additive","statName","lessThan","UnlockRequirementTypes","UnlockRequirement","classType","requiredLevel","minCount","BossDefeatedRequirement","bossDefeated","getBossDefeatedCount","ClassLevelRequirement","classLevel","unlockedClasses","includes","getClassModifier","level","greaterThanOrEqualTo","PlayerLevelRequirement","playerLevel","getTotalLevel","PrestigeCountRequirement","prestigeCount","count","StatMinimumsRequirement","statMinimums","isGreaterThanOrEqualTo","loadUnlockRequirements","unlockRequirementData","AllZones","PlayerClass","unlockRequirements","experience","levelUpStats","BardPlayerClass","updatedData","bard","DefenderPlayerClass","defender","HealerPlayerClass","healer","MagePlayerClass","mage","RoguePlayerClass","rogue","WarriorPlayerClass","warrior","ArcherPlayerClass","archer","ClericPlayerClass","cleric","DancerPlayerClass","dancer","FighterPlayerClass","fighter","MonkPlayerClass","monk","SoldierPlayerClass","soldier","WizardPlayerClass","wizard","allClassesInitialized","EXP_LEVEL_EXPONENT","BASE_EXP","ClassModifier","classId","statMultiplier","baseStats","multiplyAllStats","statGain","pow","levelToGrowTo","floor","console","log","toString","playerStats","numberOfLevelUps","addStats","getModifiedStats","numberOfLevelsToGrow","getNumberOfLevelsToGrow","levelUp","AllPrestigeSkills","Zone","requiredStats","zoneKeyStats","minExp","maxExp","statIncrementalMultiplier","rate","StrawberryValleyFieldsZone","strawberryValleyFields","BerryRidgeRangeZone","berryRidgeRange","OldStoneFarmZone","oldStoneFarm","QuietSandsZone","quietSands","SmallPawsAcresZone","smallPawsAcres","allZonesInitialized","ZoneModifier","zoneId","removeRequirements","originalZone","modifiedMinExp","getModifiedMinExp","modifiedMaxExp","getModifiedMaxExp","modifiedStatMultiplier","length","keyStat","expMultiplier","maxMultiplierPerStat","playerStat","requiredStat","singleStatMultiplier","min","dividedBy","Object","keys","values","Player","activeClassLimit","activeClasses","classModifiers","activeZone","discoveredZones","zoneModifiers","loadClassModifiers","loadZoneModifiers","zoneModifier","classModifier","indexOf","playerClassId","getZoneModifier","shift","expReward","getExperienceReward","modifiedExpReward","experienceGain","forEach","addExperience","checkForLevelUp","classModifiersData","classModifierData","zoneModifiersData","initialDiscoveredZones","initialPlayerStats","initialUnlockedClasses","initialPlayer","PrestigeSkill","maxLevel","currentLevel","numberOfPoints","spendPoints","applySkill","ImprovedLearningPrestigeSkill","improvedLearning","addTemporaryModifier","ImprovedTrainingPrestigeSkill","improvedTraining","ImprovedConsolidatingPrestigeSkill","improvedConsolidating","prestigeStatsGain","createPrestigeSkill","prestigeSkill","Prestige","points","pointsToGainOnNextPrestige","prestigeSkills","basePlayer","loadPrestigeSkills","some","prestigeSkillItem","createdPrestigeSkill","unlockPrestigeSkill","pointsToAdd","pointsToSpend","isPretigeAvailable","getStatMultiplierOnPrestige","gainedStats","subtractStatsValue","newPlayer","setPlayer","GameState","fps","lastExecutionTime","loopSubscriptions","applyPrestigeSkills","executableLoopFunction","timeInterval","timeSinceLastExecution","ids","loopSubscription","frameTime","executionTime","gameLoopData","executeLoopFunction","defaultGameState","GameContext","createContext","lastFrameTime","performance","now","GameLoopProgress","gameLoopId","useContext","percent","showInfo","toCapitalizedWords","empty","words","match","capitalize","join","word","charAt","toUpperCase","substring","bossIconMap","BossBattle","appState","nextBossId","lastBossDefeatedIndex","getNextBossId","createBossDisplay","bossBattle","bossIcon","direction","Title","size","icon","Text","fightButtonDisabled","onClick","disabled","createPreFightDisplay","createBattleDisplay","ClassPicker","createChangeActiveClassHandler","makeClassActive","style","width","getName","dataSource","renderItem","item","Item","display","gutter","span","getExperienceRequiredToLevel","generateClassListItem","bordered","itemLayout","PRESTIGE_SKILL_ICON_MAP","PrestigeActivation","createPrestigeSkillClickHandler","increaseLevel","getRequiredLevel","activatePrestige","grid","GAME_SAVE_KEY","saveGame","window","localStorage","setItem","JSON","stringify","saveGameToLocalStorage","loadGameFromLocalStorage","gameData","getItem","parse","err","clearSavedGameFromLocalStorage","removeItem","SettingsPanel","location","reload","Typography","StatsViewer","activeZoneName","createActivityPanel","ZONE_LOOP_ID","addExperienceToActiveClasses","ZonePicker","createSetActiveZoneHandler","makeZoneActive","getRate","getActiveZone","getStats","generateZoneListItem","Header","Layout","Content","Sider","PageLayout","useState","mainContent","setMainContent","overflow","height","position","left","className","theme","mode","defaultSelectedKeys","marginLeft","padding","margin","textAlign","meetsAllUnlockRequirements","requirementsMet","allPrestigeSkillsInitialized","UNLOCK_UNLOCKABLES_LOOP_ID","unlockAllUnlockables","playerClass","unlockClass","zone","unlockZone","unlockZones","unlockPrestigeSkills","SAVE_GAME_LOOP_ID","saveGameLoopFunction","App","React","setLastFrameTime","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","gameLoop","Provider","value","config","precision","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.030167f3.chunk.js","sourcesContent":["export enum AllModifiers {\n    experienceGain = \"experienceGain\",\n    prestigePointGain = \"prestigePointGain\",\n    statGain = \"statGain\",\n    prestigeStatsGain = \"prestigeStatsGain\",\n}","import { GameLoopData } from \"../../gameState\";\n\nexport const PLAYER_ATTACK_LOOP_ID = 'playerAttack';\nexport const BOSS_ATTACK_LOOP_ID = 'bossAttack';\n\nexport function playerAttackLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        battle.playerAttack();\n    }\n}\n\nexport function bossAttackLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        battle.bossAttack();\n    }\n}","import Battle from \"../../battle/battle\";\nimport GameState, { GameLoopData } from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport { BOSS_ATTACK_LOOP_ID, PLAYER_ATTACK_LOOP_ID } from \"./battleEntityAttack\";\n\nexport const BATTLE_OVER_LOOP_ID = 'battleOver';\n\nexport function battleOverLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        if (battle.player.isDefeated()) {\n            stopBattle(data.gameState);\n        } else if (battle.boss.isDefeated()) {\n            gainRewards(data.gameState, battle);\n            stopBattle(data.gameState);\n        }\n    }\n}\n\nfunction gainRewards(gameState: GameState, battle: Battle) {\n    const prestigePointGain = gameState.modifierManager.modifyDecimal(battle.boss.prestigePoints, AllModifiers.prestigePointGain);\n    gameState.prestige.addPoints(prestigePointGain);\n    gameState.player.lastBossDefeated = battle.boss.id;\n    gameState.history.addDefeatedBoss(battle.boss.id);\n}\n\nfunction stopBattle(gameState: GameState) {\n    gameState.removeSubscriptions([BATTLE_OVER_LOOP_ID, PLAYER_ATTACK_LOOP_ID, BOSS_ATTACK_LOOP_ID]);\n    gameState.battle = undefined;\n}","export enum AllBosses {\n    brute = \"brute\",\n    spectre = \"spectre\"\n}","export enum StatTypes {\n    strength = 'strength',\n    toughness = 'toughness',\n    wisdom = 'wisdom',\n    dexterity = 'dexterity',\n    charisma = 'charisma',\n    intelligence = 'intelligence'\n}","import Decimal from \"decimal.js\";\n\nexport interface BattleEntityData {\n    attackValue: Decimal | string,\n    defenseValue: Decimal | string,\n    bonusDamage?: Decimal | string,\n    attackInterval?: number\n}\n\nexport default class BattleEntity {\n    hp: Decimal;\n    attackValue: Decimal;\n    defenseValue: Decimal;\n    bonusDamage: Decimal;\n    attackInterval: number;\n\n    constructor(data: BattleEntityData) {\n        this.attackValue = new Decimal(data.attackValue);\n        this.defenseValue = new Decimal(data.defenseValue);\n        this.bonusDamage = data.bonusDamage ? new Decimal(data.bonusDamage) : new Decimal(1);\n        this.attackInterval = data.attackInterval ? data.attackInterval : 5;\n        this.hp = this.attackValue.plus(this.defenseValue).div(5);\n    }\n\n    attack(target: BattleEntity) {\n        target.hp = Decimal.max(target.hp.minus(Decimal.max(this.attackValue.minus(target.defenseValue), 0)), 0);\n    }\n\n    isDefeated() {\n        return this.hp.eq(0);\n    }\n}","import Player from \"../player/player\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport BattleEntity from \"./battleEntity\";\n\nexport interface BattlePlayerData {\n    player: Player,\n    attackStat: StatTypes,\n    defenseStat: StatTypes,\n}\n\nexport default class BattlePlayer extends BattleEntity {\n    constructor(data: BattlePlayerData) {\n        super({\n            attackValue: data.player.stats.get(data.attackStat),\n            defenseValue: data.player.stats.get(data.defenseStat),\n        });\n    }\n}","import Decimal from \"decimal.js\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport BattleEntity, { BattleEntityData } from \"./battleEntity\";\nimport { AllBosses } from \"./bosses/allBosses\";\n\nexport interface BossData extends BattleEntityData {\n    id: AllBosses,\n    name: string,\n    prestigePoints: Decimal | string,\n    playerAttackStat: StatTypes,\n    playerDefenseStat: StatTypes\n}\n\nexport default class Boss extends BattleEntity {\n    id: AllBosses;\n    name: string;\n    prestigePoints: Decimal;\n    playerAttackStat: StatTypes;\n    playerDefenseStat: StatTypes;\n\n    constructor(data: BossData) {\n        super(data);\n        this.prestigePoints = new Decimal(data.prestigePoints);\n        this.id = data.id;\n        this.name = data.name;\n        this.playerAttackStat = data.playerAttackStat;\n        this.playerDefenseStat = data.playerDefenseStat;\n    }\n}","import { StatTypes } from \"../../stats/statsEnum\";\nimport Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\n\n\nexport default class Brute extends Boss {\n    constructor() {\n        super({\n            id: AllBosses.brute,\n            name: AllBosses.brute,\n            prestigePoints: '1',\n            attackValue: '2500',\n            defenseValue: '2500',\n            playerAttackStat: StatTypes.strength,\n            playerDefenseStat: StatTypes.toughness\n        });\n    }\n}","import { StatTypes } from \"../../stats/statsEnum\";\nimport Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\n\n\nexport default class Spectre extends Boss {\n    constructor() {\n        super({\n            id: AllBosses.spectre,\n            name: AllBosses.spectre,\n            prestigePoints: '5',\n            attackValue: '25000',\n            defenseValue: '25000',\n            playerAttackStat: StatTypes.wisdom,\n            playerDefenseStat: StatTypes.charisma\n        });\n    }\n}","import Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\nimport Brute from \"./brute\";\nimport Spectre from \"./spectre\";\n\nexport default function initializeBoss(bossId: AllBosses): Boss {\n    switch (bossId) {\n        case AllBosses.brute:\n            return new Brute();\n        case AllBosses.spectre:\n            return new Spectre();\n        default:\n            throw new Error('Invalid bossId');\n    }\n}","import GameState from \"../gameState\";\nimport { bossAttackLoopFunction, BOSS_ATTACK_LOOP_ID, playerAttackLoopFunction, PLAYER_ATTACK_LOOP_ID } from \"../loopFunctions/battle/battleEntityAttack\";\nimport { battleOverLoopFunction, BATTLE_OVER_LOOP_ID } from \"../loopFunctions/battle/battleOver\";\nimport BattlePlayer from \"./battlePlayer\";\nimport Boss from \"./boss\";\nimport { AllBosses } from \"./bosses/allBosses\";\nimport initializeBoss from \"./bosses/iniitializeBoss\";\n\nexport interface BattleData {\n    bossId: AllBosses\n    gameState: GameState\n}\n\nexport default class Battle {\n    boss: Boss;\n    player: BattlePlayer;\n\n    constructor(data: BattleData) {\n        this.boss = initializeBoss(data.bossId);\n        this.player = new BattlePlayer({\n            player: data.gameState.player,\n            attackStat: this.boss.playerAttackStat,\n            defenseStat: this.boss.playerDefenseStat\n        });\n        data.gameState.addLoopSubscription(PLAYER_ATTACK_LOOP_ID, playerAttackLoopFunction, this.player.attackInterval);\n        data.gameState.addLoopSubscription(BOSS_ATTACK_LOOP_ID, bossAttackLoopFunction, this.boss.attackInterval);\n        data.gameState.addLoopSubscription(BATTLE_OVER_LOOP_ID, battleOverLoopFunction);\n    }\n\n    playerAttack() {\n        this.player.attack(this.boss);\n    }\n\n    bossAttack() {\n        this.boss.attack(this.player);\n    }\n}","import GameState from \"../../gameState\";\nimport { AllBosses } from \"./allBosses\";\n\nconst bossFightOrder = [\n    AllBosses.brute,\n    AllBosses.spectre\n];\n\nexport default function getNextBossId(gameState: GameState) {\n    if (!gameState.player.lastBossDefeated) {\n        return bossFightOrder[0];\n    } else {\n        const lastBossDefeatedIndex = bossFightOrder.indexOf(gameState.player.lastBossDefeated);\n        if (lastBossDefeatedIndex === -1) {\n            return null;\n        } else if (lastBossDefeatedIndex + 1 >= bossFightOrder.length) {\n            return null;\n        } else {\n            return bossFightOrder[lastBossDefeatedIndex + 1];\n        }\n    }\n};","import { AllBosses } from \"../battle/bosses/allBosses\"\n\nexport type BossesDefeated = {\n    [key in AllBosses]?: number\n}\n\nexport interface HistoryData {\n    bossesDefeated?: BossesDefeated\n}\n\nexport default class History {\n    bossesDefeated: BossesDefeated\n\n    constructor(data: HistoryData) {\n        this.bossesDefeated = data.bossesDefeated ? { ...data.bossesDefeated } : {};\n    }\n\n    addDefeatedBoss(bossId: AllBosses) {\n        const defeatedBossCount = this.bossesDefeated[bossId] || 0;\n        this.bossesDefeated[bossId] = defeatedBossCount + 1;\n    }\n\n    getBossDefeatedCount(bossId: AllBosses) {\n        return this.bossesDefeated[bossId] || 0\n    }\n}","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { AllModifiers } from \"./allModifiers\";\n\nexport type Gains = Stats | Decimal | number\n\nexport interface ModifierData {\n    id: string\n    group: AllModifiers\n    additiveValue?: Decimal | string\n    multiplicativeValue?: Decimal | string\n}\n\nexport default class Modifier {\n    id: string\n    group: AllModifiers\n    additiveValue: Decimal\n    multiplicativeValue: Decimal\n\n    constructor(data: ModifierData) {\n        this.id = data.id;\n        this.group = data.group;\n        this.additiveValue = data.additiveValue ? new Decimal(data.additiveValue) : new Decimal(0);\n        this.multiplicativeValue = data.multiplicativeValue ? new Decimal(data.multiplicativeValue) : new Decimal(1);\n    }\n\n    modifyStats(gains: Stats) {\n        return this.addToStatGains(this.multiplyStatGains(gains));\n    }\n\n    modifyDecimal(gains: Decimal) {\n        return this.addToGain(this.multiplyGain(gains));\n    }\n\n    modifyNumber(gains: number) {\n        return this.addToGain(this.multiplyGain(gains)).toNumber();\n    }\n\n    multiplyStatGains(statGains: Stats) {\n        return statGains.multiplyAllStatsValue(this.multiplicativeValue);\n    }\n\n    addToStatGains(statGains: Stats) {\n        return statGains.addAllStatsValue(this.additiveValue);\n    }\n\n    multiplyGain(gain: Decimal | number) {\n        return this.multiplicativeValue.times(gain);\n    }\n\n    addToGain(gain: Decimal | number) {\n        return this.additiveValue.add(gain);\n    }\n}","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { AllModifiers } from \"./allModifiers\";\nimport Modifier, { Gains, ModifierData } from \"./modifier\";\n\nexport type ModifierMapData = {\n    [key in AllModifiers]?: Array<Modifier | ModifierData>\n}\n\nexport type ModifierMap = {\n    [key in AllModifiers]?: Array<Modifier>\n}\n\nexport interface ModifierManagerData {\n    permanentModifiers?: ModifierMapData\n}\n\nexport default class ModifierManager {\n    permanentModifiers: ModifierMap\n    temporaryModifiers: ModifierMap\n\n    constructor(data: ModifierManagerData) {\n        this.permanentModifiers = this.loadModifiers(data.permanentModifiers);\n        this.temporaryModifiers = {};\n    }\n\n    modifyStats(gains: Stats, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyStats(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyStats(output);\n            }\n        }\n\n        return output;\n    }\n\n    modifyDecimal(gains: Decimal, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyDecimal(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyDecimal(output);\n            }\n        }\n\n        return output;\n    }\n\n    modifyNumber(gains: number, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyNumber(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyNumber(output);\n            }\n        }\n\n        return output;\n    }\n\n    private addModifierToModifierGroup(modifier: Modifier, modifierGroup: Array<Modifier>) {\n        const alreadyHasModifier = modifierGroup.findIndex(modifierItem => {\n            if (modifier.id === modifierItem.id) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (alreadyHasModifier >= 0) {\n            modifierGroup[alreadyHasModifier] = modifier;\n        } else {\n            modifierGroup.push(modifier);\n        }\n    }\n\n    addTemporaryModifier(modifier: Modifier) {\n        const modifierGroup = this.temporaryModifiers[modifier.group];\n\n        if (!modifierGroup) {\n            this.temporaryModifiers[modifier.group] = [modifier]\n        } else {\n            this.addModifierToModifierGroup(modifier, modifierGroup);\n        }\n    }\n\n    addPermanentModifier(modifier: Modifier) {\n        const modifierGroup = this.permanentModifiers[modifier.group];\n\n        if (!modifierGroup) {\n            this.permanentModifiers[modifier.group] = [modifier]\n        } else {\n            this.addModifierToModifierGroup(modifier, modifierGroup);\n        }\n    }\n\n    loadModifiers(modifierMapData?: ModifierMapData): ModifierMap {\n        const output: ModifierMap = {};\n        let key: keyof typeof AllModifiers;\n\n        if (!modifierMapData) {\n            return output;\n        }\n\n        for (key in modifierMapData) {\n            const modifierData = modifierMapData[key];\n            if (modifierData) {\n                output[key] = modifierData.map(data => {\n                    return new Modifier(data);\n                });\n            }\n        }\n\n        return output;\n    }\n}","import Decimal from \"decimal.js\";\nimport { StatTypes } from \"./statsEnum\";\n\nexport interface StatsData {\n    [StatTypes.strength]: string | Decimal;\n    [StatTypes.toughness]: string | Decimal;\n    [StatTypes.wisdom]: string | Decimal;\n    [StatTypes.dexterity]: string | Decimal;\n    [StatTypes.charisma]: string | Decimal;\n    [StatTypes.intelligence]: string | Decimal;\n}\n\nexport default class Stats {\n    [StatTypes.strength]: Decimal;\n    [StatTypes.toughness]: Decimal;\n    [StatTypes.wisdom]: Decimal;\n    [StatTypes.dexterity]: Decimal;\n    [StatTypes.charisma]: Decimal;\n    [StatTypes.intelligence]: Decimal;\n\n    constructor(data: StatsData) {\n        this.strength = new Decimal(data.strength);\n        this.toughness = new Decimal(data.toughness);\n        this.wisdom = new Decimal(data.wisdom);\n        this.dexterity = new Decimal(data.dexterity);\n        this.charisma = new Decimal(data.charisma);\n        this.intelligence = new Decimal(data.intelligence);\n    }\n\n    addStats(incrementalStats: Stats) {\n        this.strength = this.strength.plus(incrementalStats.strength);\n        this.toughness = this.toughness.plus(incrementalStats.toughness);\n        this.wisdom = this.wisdom.plus(incrementalStats.wisdom);\n        this.dexterity = this.dexterity.plus(incrementalStats.dexterity);\n        this.charisma = this.charisma.plus(incrementalStats.charisma);\n        this.intelligence = this.intelligence.plus(incrementalStats.intelligence);\n    }\n\n    subtractStatsValue(incrementalStats: Stats) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.minus(incrementalStats.strength),\n            [StatTypes.toughness]: this.toughness.plus(incrementalStats.toughness),\n            [StatTypes.wisdom]: this.wisdom.plus(incrementalStats.wisdom),\n            [StatTypes.dexterity]: this.dexterity.plus(incrementalStats.dexterity),\n            [StatTypes.charisma]: this.charisma.plus(incrementalStats.charisma),\n            [StatTypes.intelligence]: this.intelligence.plus(incrementalStats.intelligence),\n        });\n    }\n\n    multiplyAllStats(multiplier: Decimal | number) {\n        this.strength = this.strength.times(multiplier);\n        this.toughness = this.toughness.times(multiplier);\n        this.wisdom = this.wisdom.times(multiplier);\n        this.dexterity = this.dexterity.times(multiplier);\n        this.charisma = this.charisma.times(multiplier);\n        this.intelligence = this.intelligence.times(multiplier);\n        return this;\n    }\n\n    multiplyAllStatsValue(multiplier: Decimal | number) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.times(multiplier),\n            [StatTypes.toughness]: this.toughness.times(multiplier),\n            [StatTypes.wisdom]: this.wisdom.times(multiplier),\n            [StatTypes.dexterity]: this.dexterity.times(multiplier),\n            [StatTypes.charisma]: this.charisma.times(multiplier),\n            [StatTypes.intelligence]: this.intelligence.times(multiplier),\n        });\n    }\n\n    addAllStatsValue(additive: Decimal | number) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.plus(additive),\n            [StatTypes.toughness]: this.toughness.plus(additive),\n            [StatTypes.wisdom]: this.wisdom.plus(additive),\n            [StatTypes.dexterity]: this.dexterity.plus(additive),\n            [StatTypes.charisma]: this.charisma.plus(additive),\n            [StatTypes.intelligence]: this.intelligence.plus(additive),\n        });\n    }\n\n    get(statName: StatTypes) {\n        return this[statName];\n    }\n\n    isGreaterThanOrEqualTo(stats: Stats) {\n        if (this[StatTypes.strength].lessThan(stats[StatTypes.strength])) {\n            return false;\n        }\n        if (this[StatTypes.toughness].lessThan(stats[StatTypes.toughness])) {\n            return false;\n        }\n        if (this[StatTypes.dexterity].lessThan(stats[StatTypes.dexterity])) {\n            return false;\n        }\n        if (this[StatTypes.wisdom].lessThan(stats[StatTypes.wisdom])) {\n            return false;\n        }\n        if (this[StatTypes.intelligence].lessThan(stats[StatTypes.intelligence])) {\n            return false;\n        }\n        if (this[StatTypes.charisma].lessThan(stats[StatTypes.charisma])) {\n            return false;\n        }\n        return true;\n    }\n}","export enum AllClasses {\n    bard = \"bard\",\n    warrior = \"warrior\",\n    healer = \"healer\",\n    defender = \"defender\",\n    mage = \"mage\",\n    rogue = \"rogue\",\n    archer = \"archer\",\n    fighter = \"fighter\",\n    soldier = \"soldier\",\n    wizard = \"wizard\",\n    cleric = \"cleric\",\n    dancer = \"dancer\",\n    monk = \"monk\",\n    /*\n    assassin = \"assassin\",\n    ninja = \"ninja\",\n    spellslinger = \"spellslinger\",\n    hunter = \"hunter\",\n    ranger = \"ranger\",\n    berserker = \"berserker\",\n    priest = \"priest\",\n    enchanter = \"enchanter\",\n    necromancer = \"necromancer\",\n    shadowknight = \"shadowknight\",\n    summoner = \"summoner\",\n    dragoon = \"dragoon\",\n    lancer = \"lancer\",\n    paladin = \"paladin\",\n    druid = \"druid\",\n    empath = \"empath\",\n    battlesinger = \"battlesinger\",\n    fleshwarper = \"fleshwarper\",\n    infiltrator = \"infiltrator\",\n    lich = \"lich\",\n    riddler = \"riddler\",\n    sapper = \"sapper\",\n    wordsmith = \"wordsmith\",\n    truthsayer = \"truthsayer\",\n    skald = \"skald\",\n    sniper = \"sniper\",\n    spy = \"spy\",\n    thief = \"thief\"\n    */\n}","export enum UnlockRequirementTypes {\n    classLevel = \"classLevel\",\n    playerLevel = \"playerLevel\",\n    statMinimums = \"statMinimums\",\n    bossDefeated = \"bossDefeated\",\n    prestigeCount = \"prestigeCount\"\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../battle/bosses/allBosses\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport GameState from \"../gameState\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface UnlockRequirementData {\n    id: UnlockRequirementTypes\n    classType?: AllClasses,\n    requiredLevel?: Decimal | string\n    stats?: Stats | StatsData\n    bossId?: AllBosses,\n    minCount?: number,\n}\n\nexport default abstract class UnlockRequirement {\n    id: UnlockRequirementTypes;\n    classType?: AllClasses;\n    requiredLevel?: Decimal;\n    stats?: Stats;\n    bossId?: AllBosses;\n    minCount?: number;\n\n    constructor(data: UnlockRequirementData) {\n        this.id = data.id;\n    }\n\n    abstract requirementsMet(gameState: GameState): boolean\n}","import { AllBosses } from \"../battle/bosses/allBosses\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface BossDefeatedRequirementData {\n    bossId?: AllBosses,\n    minCount?: number\n}\n\nexport default class BossDefeatedRequirement extends UnlockRequirement {\n    bossId: AllBosses\n    minCount: number\n\n    constructor(data: BossDefeatedRequirementData) {\n        super({\n            id: UnlockRequirementTypes.bossDefeated\n        });\n        if (!data.bossId) {\n            throw new Error('bossId is required');\n        }\n\n        if (!data.minCount) {\n            throw new Error('minCount is required');\n        }\n\n        this.bossId = data.bossId;\n        this.minCount = data.minCount;\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.history.getBossDefeatedCount(this.bossId) >= this.minCount) {\n            return true;\n        }\n\n        return false;\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface ClassLevelRequirementData {\n    classType?: AllClasses,\n    requiredLevel?: Decimal | string\n}\n\nexport default class ClassLevelRequirement extends UnlockRequirement {\n    classType: AllClasses;\n    requiredLevel: Decimal;\n\n    constructor(data: ClassLevelRequirementData) {\n        super({\n            id: UnlockRequirementTypes.classLevel\n        });\n        if (!data.classType) {\n            throw new Error('classType is required');\n        }\n        if (!data.requiredLevel) {\n            throw new Error('requiredLevel is required');\n        }\n        this.classType = data.classType;\n        this.requiredLevel = new Decimal(data.requiredLevel);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.unlockedClasses.includes(this.classType)) {\n            const classModifier = gameState.player.getClassModifier(this.classType);\n            if (classModifier.level.greaterThanOrEqualTo(this.requiredLevel)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}","import Decimal from \"decimal.js\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface PlayerLevelRequirementData {\n    requiredLevel?: Decimal | string\n}\n\nexport default class PlayerLevelRequirement extends UnlockRequirement {\n    requiredLevel: Decimal;\n\n    constructor(data: PlayerLevelRequirementData) {\n        super({\n            id: UnlockRequirementTypes.playerLevel\n        });\n        if (!data.requiredLevel) {\n            throw new Error('requiredLevel is required');\n        }\n        this.requiredLevel = new Decimal(data.requiredLevel);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.getTotalLevel().greaterThanOrEqualTo(this.requiredLevel)) {\n            return true;\n        }\n\n        return false;\n    }\n\n}","import gameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface PrestigeCountRequirementData {\n    minCount?: number,\n}\n\nexport default class PrestigeCountRequirement extends UnlockRequirement {\n    minCount: number\n\n    constructor(data: PrestigeCountRequirementData) {\n        super({\n            id: UnlockRequirementTypes.prestigeCount\n        });\n\n        if (!data.minCount) {\n            throw new Error('minCount is required');\n        }\n\n        this.minCount = data.minCount;\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.prestige.count >= this.minCount) {\n            return true;\n        }\n\n        return false;\n    }\n}","import gameState from \"../gameState\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport UnlockRequirement from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface StatMinimumsRequirementData {\n    stats?: Stats | StatsData\n}\n\nexport default class StatMinimumsRequirement extends UnlockRequirement {\n    stats: Stats;\n\n    constructor(data: StatMinimumsRequirementData) {\n        super({\n            id: UnlockRequirementTypes.statMinimums\n        });\n        if (!data.stats) {\n            throw new Error('stats are required');\n        }\n        this.stats = new Stats(data.stats);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.stats.isGreaterThanOrEqualTo(this.stats)) {\n            return true;\n        }\n\n        return false;\n    }\n\n}","import BossDefeatedRequirement from \"./bossDefeatedRequirement\";\nimport ClassLevelRequirement from \"./classLevelRequirement\";\nimport PlayerLevelRequirement from \"./playerLevelRequirement\";\nimport PrestigeCountRequirement from \"./prestigeCountRequirement\";\nimport StatMinimumsRequirement from \"./statMinimumsRequirement\";\nimport UnlockRequirement, { UnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport default function loadUnlockRequirements(data: Array<UnlockRequirement | UnlockRequirementData>): Array<UnlockRequirement> {\n    const output: Array<UnlockRequirement> = [];\n    for (const unlockRequirementData of data) {\n        if (unlockRequirementData.id === UnlockRequirementTypes.classLevel) {\n            output.push(new ClassLevelRequirement(unlockRequirementData));\n        } else if (unlockRequirementData.id === UnlockRequirementTypes.playerLevel) {\n            output.push(new PlayerLevelRequirement(unlockRequirementData));\n        } else if (unlockRequirementData.id === UnlockRequirementTypes.statMinimums) {\n            output.push(new StatMinimumsRequirement(unlockRequirementData));\n        } else if (unlockRequirementData.id === UnlockRequirementTypes.bossDefeated) {\n            output.push(new BossDefeatedRequirement(unlockRequirementData));\n        } else if (unlockRequirementData.id === UnlockRequirementTypes.prestigeCount) {\n            output.push(new PrestigeCountRequirement(unlockRequirementData));\n        }\n    }\n    return output;\n}","export enum AllZones {\n    strawberryValleyFields = \"strawberryValleyFields\",\n    smallPawsAcres = \"smallPawsAcres\",\n    berryRidgeRange = \"berryRidgeRange\",\n    oldStoneFarm = \"oldStoneFarm\",\n    quietSands = \"quietSands\",\n    /*\n    westwoodGardens = \"westwoodGardens\",\n    littleRange = \"littleRange\",\n    moonshadowOrchard = \"moonshadowOrchard\",\n    rattlesnakeFarm = \"rattlesnakeFarm\",\n    silverbellGardens = \"silverbellGardens\",\n    firebranchNursery = \"firebranchNursery\",\n    theDryBurrows = \"theDryBurrows\",\n    theDepravedDungeon = \"theDepravedDungeon\",\n    theBloodfallLabyrinth = \"theBloodfallLabyrinth\",\n    theFalseTombs = \"theFalseTombs\",\n    theBrilliantPits = \"theBrilliantPits\",\n    theWhiteCells = \"theWhiteCells\",\n    theAbysmalVault = \"theAbysmalVault\",\n    theArticQuarters = \"theArticQuarters\",\n    theFabledLair = \"theFabledLair\",\n    vaultOfTheMadWolf = \"vaultOfTheMadWolf\",\n    redwind = \"redwind\",\n    dewport = \"dewport\",\n    southbarrow = \"southbarrow\",\n    highvein = \"highvein\",\n    starguard = \"starguard\",\n    pearlgate = \"pearlgate\",\n    stillkeep = \"stillkeep\",\n    ebonfair = \"ebonfair\",\n    stormstar = \"stormstar\",\n    ragetide = \"ragetide\",\n    bellpoint = \"bellpoint\",\n    sandshire = \"sandshire\",\n    theSinisterArena = \"theSinisterArena\",\n    theFuryStadium = \"theFuryStadium\",\n    theSanguineArena = \"theSanguineArena\",\n    theAcidArena = \"theAcidArena\",\n    wonderingSeafront = \"wonderingSeafront\",\n    minidownStrand = \"minidownStrand\",\n    delfilBay = \"delfilBay\",\n    barringwinBeach = \"barringwinBeach\",\n    malarshallPoint = \"malarshallPoint\",\n    blainlandBank = \"blainlandBank\",\n    darkShore = \"darkShore\",\n    ablomarrySchoolOfSorcery = \"ablomarrySchoolOfSorcery\",\n    bexrithsAcademyOfSpells = \"bexrithsAcademyOfSpells\",\n    trokwerthAcademyOfSorcery = \"trokwerthAcademyOfSorcery\",\n    clausinnsAcademyOfMagics = \"clausinnsAcademyOfMagics\"\n    */\n}","import Decimal from \"decimal.js\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllClasses } from \"./allClasses\";\n\n\nexport interface PlayerClassImplementationData {\n    experience: Decimal | string;\n}\nexport interface PlayerClassData {\n    id: AllClasses,\n    name: string;\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>;\n    level?: Decimal | string;\n    experience: Decimal | string;\n    levelUpStats: Stats | StatsData;\n}\n\nexport default class PlayerClass {\n    id: AllClasses;\n    name: string;\n    unlockRequirements: Array<UnlockRequirement>;\n    level: Decimal;\n    experience: Decimal;\n    levelUpStats: Stats;\n\n    constructor(data: PlayerClassData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.unlockRequirements = data.unlockRequirements ? loadUnlockRequirements(data.unlockRequirements) : [];\n        this.level = data.level ? new Decimal(data.level) : new Decimal(0);\n        this.experience = new Decimal(data.experience);\n        this.levelUpStats = new Stats(data.levelUpStats);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class BardPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.bard,\n            name: AllClasses.bard,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '3',\n                [StatTypes.charisma]: '5',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class DefenderPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.defender,\n            name: AllClasses.defender,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '3',\n                [StatTypes.toughness]: '5',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class HealerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.healer,\n            name: AllClasses.healer,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '3'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class MagePlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.mage,\n            name: AllClasses.mage,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '3',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '5'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class RoguePlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.rogue,\n            name: AllClasses.rogue,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class WarriorPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.warrior,\n            name: AllClasses.warrior,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '3',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ArcherPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.archer,\n            name: AllClasses.archer,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '60',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '80',\n                        [StatTypes.charisma]: '40',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ClericPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.cleric,\n            name: AllClasses.cleric,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '10',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '80',\n                        [StatTypes.dexterity]: '40',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '60'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '2',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '10',\n                [StatTypes.dexterity]: '2',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '5'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class DancerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.dancer,\n            name: AllClasses.dancer,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '40',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '60',\n                        [StatTypes.charisma]: '80',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '3',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '10',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class FighterPlayerClass extends PlayerClass {\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.fighter,\n            name: AllClasses.fighter,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '80',\n                        [StatTypes.toughness]: '40',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '60',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '10',\n                [StatTypes.toughness]: '3',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '2',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class MonkPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.monk,\n            name: AllClasses.monk,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.bard,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.defender,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.healer,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.mage,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.rogue,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.warrior,\n                    requiredLevel: '40'\n                }),\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '7',\n                [StatTypes.toughness]: '7',\n                [StatTypes.wisdom]: '7',\n                [StatTypes.dexterity]: '7',\n                [StatTypes.charisma]: '7',\n                [StatTypes.intelligence]: '7'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class SoldierPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.soldier,\n            name: AllClasses.soldier,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '60',\n                        [StatTypes.toughness]: '80',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '40',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '10',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '3',\n                [StatTypes.charisma]: '2',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class WizardPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.wizard,\n            name: AllClasses.wizard,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '10',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '60',\n                        [StatTypes.dexterity]: '10',\n                        [StatTypes.charisma]: '40',\n                        [StatTypes.intelligence]: '80'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '2',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.dexterity]: '2',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '10'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllClasses } from \"./allClasses\";\nimport BardPlayerClass from \"./baseClasses/bardPlayerClass\";\nimport DefenderPlayerClass from \"./baseClasses/defenderPlayerClass\";\nimport HealerPlayerClass from \"./baseClasses/healerPlayerClass\";\nimport MagePlayerClass from \"./baseClasses/magePlayerClass\";\nimport RoguePlayerClass from \"./baseClasses/roguePlayerClass\";\nimport WarriorPlayerClass from \"./baseClasses/warriorPlayerClass\";\nimport ArcherPlayerClass from \"./tierOneClasses/archerPlayerClass\";\nimport ClericPlayerClass from \"./tierOneClasses/clericPlayerClass\";\nimport DancerPlayerClass from \"./tierOneClasses/dancerPlayerClass\";\nimport FighterPlayerClass from \"./tierOneClasses/fighterPlayerClass\";\nimport MonkPlayerClass from \"./tierOneClasses/monkPlayerClass\";\nimport SoldierPlayerClass from \"./tierOneClasses/soldierPlayerClass\";\nimport WizardPlayerClass from \"./tierOneClasses/wizardPlayerClass\";\n\nconst allClassesInitialized = {\n    [AllClasses.archer]: new ArcherPlayerClass({ experience: '0' }),\n    [AllClasses.bard]: new BardPlayerClass({ experience: '0' }),\n    [AllClasses.defender]: new DefenderPlayerClass({ experience: '0' }),\n    [AllClasses.healer]: new HealerPlayerClass({ experience: '0' }),\n    [AllClasses.mage]: new MagePlayerClass({ experience: '0' }),\n    [AllClasses.rogue]: new RoguePlayerClass({ experience: '0' }),\n    [AllClasses.warrior]: new WarriorPlayerClass({ experience: '0' }),\n    [AllClasses.cleric]: new ClericPlayerClass({ experience: '0' }),\n    [AllClasses.dancer]: new DancerPlayerClass({ experience: '0' }),\n    [AllClasses.fighter]: new FighterPlayerClass({ experience: '0' }),\n    [AllClasses.monk]: new MonkPlayerClass({ experience: '0' }),\n    [AllClasses.soldier]: new SoldierPlayerClass({ experience: '0' }),\n    [AllClasses.wizard]: new WizardPlayerClass({ experience: '0' }),\n}\n\nexport default allClassesInitialized;","import Decimal from \"decimal.js\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport allClassesInitialized from \"../classes/allClassesInitialized\";\nimport GameState from \"../gameState\";\nimport { AllModifiers } from \"../modifiers/allModifiers\";\nimport Stats from \"../stats/stats\";\n\nconst EXP_LEVEL_EXPONENT = new Decimal('2');\nconst BASE_EXP = new Decimal(2);\n\n\nexport interface ClassModifierData {\n    classId: AllClasses;\n    level?: Decimal | string,\n    experience?: Decimal | string,\n    statMultiplier?: number\n}\n\nexport default class ClassModifier {\n    classId: AllClasses\n    level: Decimal\n    experience: Decimal\n    statMultiplier: number\n\n    constructor(data: ClassModifierData) {\n        this.classId = data.classId;\n        this.level = data.level ? new Decimal(data.level) : new Decimal(0);\n        this.experience = data.experience ? new Decimal(data.experience) : new Decimal(0);\n        this.statMultiplier = data.statMultiplier ? data.statMultiplier : 1;\n    }\n\n    getName() {\n        return allClassesInitialized[this.classId].name;\n    }\n\n    getModifiedStats(gameState: GameState) {\n        const baseStats = allClassesInitialized[this.classId].levelUpStats.multiplyAllStats(this.statMultiplier);\n        return gameState.modifierManager.modifyStats(baseStats, AllModifiers.statGain);\n    }\n\n    getExperienceRequiredToLevel() {\n        return BASE_EXP.times(this.level.plus(1).pow(EXP_LEVEL_EXPONENT));\n    }\n\n    getNumberOfLevelsToGrow() {\n        const levelToGrowTo = this.experience.div(BASE_EXP).pow(new Decimal(1).div(EXP_LEVEL_EXPONENT)).floor();\n        console.log(levelToGrowTo.toString());\n        console.log(levelToGrowTo.minus(this.level).toString());\n        return levelToGrowTo.minus(this.level);\n    }\n\n    addExperience(experience: Decimal) {\n        console.log(experience.toString());\n        console.log(this.experience.toString());\n        this.experience = this.experience.plus(experience);\n        console.log(this.experience.toString());\n    }\n\n    levelUp(playerStats: Stats, gameState: GameState, numberOfLevelUps = new Decimal(1)) {\n        playerStats.addStats(this.getModifiedStats(gameState).multiplyAllStatsValue(numberOfLevelUps));\n        this.level = this.level.plus(numberOfLevelUps);\n        console.log(this.level.toString());\n    }\n\n    checkForLevelUp(playerStats: Stats, gameState: GameState) {\n        const numberOfLevelsToGrow = this.getNumberOfLevelsToGrow();\n        console.log(numberOfLevelsToGrow.toString());\n        console.log(this.experience.toString());\n        if (numberOfLevelsToGrow.greaterThanOrEqualTo(1)) {\n            this.levelUp(playerStats, gameState, numberOfLevelsToGrow);\n        }\n\n    }\n}","export enum AllPrestigeSkills {\n    \"improvedConsolidating\" = \"improvedConsolidating\",\n    \"improvedLearning\" = \"improvedLearning\",\n    \"improvedTraining\" = \"improvedTraining\",\n}","import Decimal from \"decimal.js\";\nimport ZoneModifier from \"../player/zoneModifier\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport StatMinimumsRequirement from \"../unlockables/statMinimumsRequirement\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllZones } from \"./allZones\";\n\nexport type ZoneKeyStats = Array<StatTypes>;\n\nexport interface ZoneData {\n    id: AllZones;\n    name: string;\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>;\n    requiredStats: Stats | StatsData;\n    zoneKeyStats: ZoneKeyStats;\n    minExp: Decimal | string;\n    maxExp: Decimal | string;\n    statIncrementalMultiplier: Decimal | string;\n    rate: number;\n}\n\nexport default class Zone {\n    id: AllZones;\n    name: string;\n    unlockRequirements: Array<UnlockRequirement>;\n    requiredStats: Stats;\n    zoneKeyStats: ZoneKeyStats;\n    minExp: Decimal;\n    maxExp: Decimal;\n    statIncrementalMultiplier: Decimal;\n    rate: number;\n\n    constructor(data: ZoneData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.requiredStats = new Stats(data.requiredStats);\n        if (!data.unlockRequirements) {\n            this.unlockRequirements = [new StatMinimumsRequirement({ stats: this.requiredStats })];\n        } else {\n            this.unlockRequirements = loadUnlockRequirements(data.unlockRequirements);\n        }\n        this.minExp = new Decimal(data.minExp);\n        this.maxExp = new Decimal(data.maxExp);\n        this.statIncrementalMultiplier = new Decimal(data.statIncrementalMultiplier);\n        this.zoneKeyStats = data.zoneKeyStats;\n        this.rate = data.rate;\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\nexport default class StrawberryValleyFieldsZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.strawberryValleyFields,\n            name: AllZones.strawberryValleyFields,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '5',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.intelligence]: '5',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.charisma]: '5',\n            }),\n            zoneKeyStats: [],\n            minExp: '1',\n            maxExp: '5',\n            statIncrementalMultiplier: '2',\n            rate: 5\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class BerryRidgeRangeZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.berryRidgeRange,\n            name: AllZones.berryRidgeRange,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '250',\n                [StatTypes.toughness]: '250',\n                [StatTypes.dexterity]: '250',\n                [StatTypes.intelligence]: '250',\n                [StatTypes.wisdom]: '250',\n                [StatTypes.charisma]: '250',\n            }),\n            zoneKeyStats: [],\n            minExp: '25',\n            maxExp: '250',\n            statIncrementalMultiplier: '2',\n            rate: 5\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class OldStoneFarmZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.oldStoneFarm,\n            name: AllZones.oldStoneFarm,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '40',\n                [StatTypes.toughness]: '60',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.intelligence]: '10',\n                [StatTypes.wisdom]: '10',\n                [StatTypes.charisma]: '30',\n            }),\n            zoneKeyStats: [StatTypes.toughness, StatTypes.strength, StatTypes.charisma],\n            minExp: '10',\n            maxExp: '80',\n            statIncrementalMultiplier: '2',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class QuietSandsZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.quietSands,\n            name: AllZones.quietSands,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '10',\n                [StatTypes.toughness]: '50',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.intelligence]: '10',\n                [StatTypes.wisdom]: '35',\n                [StatTypes.charisma]: '10',\n            }),\n            zoneKeyStats: [StatTypes.toughness, StatTypes.wisdom],\n            minExp: '12',\n            maxExp: '48',\n            statIncrementalMultiplier: '2',\n            rate: 3\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class SmallPawsAcresZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.smallPawsAcres,\n            name: AllZones.smallPawsAcres,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '25',\n                [StatTypes.toughness]: '25',\n                [StatTypes.dexterity]: '25',\n                [StatTypes.intelligence]: '25',\n                [StatTypes.wisdom]: '25',\n                [StatTypes.charisma]: '25',\n            }),\n            zoneKeyStats: [],\n            minExp: '5',\n            maxExp: '120',\n            statIncrementalMultiplier: '3',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import { AllZones } from \"./allZones\";\nimport StrawberryValleyFieldsZone from \"./baseZones/strawberryValleyFieldsZone\";\nimport BerryRidgeRangeZone from \"./tierOneZones/berryRidgeRangeZone\";\nimport OldStoneFarmZone from \"./tierOneZones/oldStoneFarmZone\";\nimport QuietSandsZone from \"./tierOneZones/quietSandsZone\";\nimport SmallPawsAcresZone from \"./tierOneZones/smallPawsAcresZone\";\n\nconst allZonesInitialized = {\n    [AllZones.strawberryValleyFields]: new StrawberryValleyFieldsZone(),\n    [AllZones.berryRidgeRange]: new BerryRidgeRangeZone(),\n    [AllZones.oldStoneFarm]: new OldStoneFarmZone(),\n    [AllZones.quietSands]: new QuietSandsZone(),\n    [AllZones.smallPawsAcres]: new SmallPawsAcresZone(),\n}\n\nexport default allZonesInitialized;","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport { AllZones } from \"../zones/allZones\";\nimport allZonesInitialized from \"../zones/allZonesInitialized\";\n\nexport interface ZoneModifierData {\n    zoneId: AllZones;\n    removeRequirements?: boolean;\n    minExp?: Decimal | string;\n    maxExp?: Decimal | string;\n    statIncrementalMultiplier?: Decimal | string;\n    rate?: number;\n}\n\nexport default class ZoneModifier {\n    zoneId: AllZones;\n    removeRequirements: boolean;\n    minExp: Decimal;\n    maxExp: Decimal;\n    statIncrementalMultiplier: Decimal;\n    rate: number;\n\n    constructor(data: ZoneModifierData) {\n        this.zoneId = data.zoneId;\n        this.removeRequirements = !!data.removeRequirements;\n        this.minExp = data.minExp ? new Decimal(data.minExp) : new Decimal(1);\n        this.maxExp = data.maxExp ? new Decimal(data.maxExp) : new Decimal(1);\n        this.statIncrementalMultiplier = data.statIncrementalMultiplier ? new Decimal(data.statIncrementalMultiplier) : new Decimal(1);\n        this.rate = data.rate ? data.rate : 1;\n    }\n\n    getName() {\n        return allZonesInitialized[this.zoneId].name;\n    }\n\n    getRate() {\n        return allZonesInitialized[this.zoneId].rate * this.rate;\n    }\n\n    getModifiedMinExp() {\n        return allZonesInitialized[this.zoneId].minExp.times(this.minExp)\n    }\n\n    getModifiedMaxExp() {\n        return allZonesInitialized[this.zoneId].maxExp.times(this.maxExp);\n    }\n\n    getStats() {\n        return allZonesInitialized[this.zoneId].requiredStats;\n    }\n\n    getExperienceReward(playerStats: Stats): Decimal {\n        const originalZone = allZonesInitialized[this.zoneId];\n        const modifiedMinExp = this.getModifiedMinExp();\n        const modifiedMaxExp = this.getModifiedMaxExp();\n        const modifiedStatMultiplier = originalZone.statIncrementalMultiplier.times(this.statIncrementalMultiplier);\n\n        if (originalZone.zoneKeyStats.length > 0) {\n            let keyStat: StatTypes;\n            let expMultiplier = new Decimal(1);\n            const maxMultiplierPerStat = modifiedMaxExp.div(modifiedMinExp).div(originalZone.zoneKeyStats.length);\n            for (keyStat of originalZone.zoneKeyStats) {\n                const playerStat = playerStats.get(keyStat);\n                const requiredStat = originalZone.requiredStats.get(keyStat).times(modifiedStatMultiplier);\n                const singleStatMultiplier = Decimal.min(playerStat.dividedBy(requiredStat).minus(1), maxMultiplierPerStat);\n                expMultiplier = expMultiplier.plus(singleStatMultiplier);\n            }\n            console.log(expMultiplier.toString());\n            return Decimal.min(modifiedMaxExp, Decimal.max(modifiedMinExp.times(expMultiplier), modifiedMinExp));\n        } else {\n            let keyStat: StatTypes;\n            let expMultiplier = new Decimal(1);\n            const maxMultiplierPerStat = modifiedMaxExp.div(modifiedMinExp).div(Object.keys(StatTypes).length);\n            for (keyStat of Object.values(StatTypes)) {\n                const playerStat = playerStats.get(keyStat);\n                const requiredStat = originalZone.requiredStats.get(keyStat).times(modifiedStatMultiplier);\n                const singleStatMultiplier = Decimal.min(playerStat.dividedBy(requiredStat).minus(1), maxMultiplierPerStat);\n                expMultiplier = expMultiplier.plus(singleStatMultiplier);\n            }\n            console.log(expMultiplier.toString());\n            return Decimal.min(modifiedMaxExp, Decimal.max(modifiedMinExp.times(expMultiplier), modifiedMinExp));\n        }\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../battle/bosses/allBosses\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport GameState from \"../gameState\";\nimport { AllModifiers } from \"../modifiers/allModifiers\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { AllZones } from \"../zones/allZones\";\nimport ClassModifier, { ClassModifierData } from \"./classModifier\";\nimport ZoneModifier, { ZoneModifierData } from \"./zoneModifier\";\n\nexport type ActiveClasses = Array<AllClasses>;\n\nexport type UnlockedClasses = Array<AllClasses>\n\nexport type DiscoveredZones = Array<AllZones>\n\nexport type ClassModifiers = {\n    [key in AllClasses]?: ClassModifier\n}\n\nexport type ClassModifiersData = {\n    [key in AllClasses]?: ClassModifier | ClassModifierData\n}\n\nexport type ZoneModifiers = {\n    [key in AllZones]?: ZoneModifier\n}\n\nexport type ZoneModifiersData = {\n    [key in AllZones]?: ZoneModifier | ZoneModifierData\n}\n\nexport interface PlayerData {\n    activeClassLimit: number;\n    activeClasses: ActiveClasses;\n    unlockedClasses: UnlockedClasses;\n    classModifiers?: ClassModifiers | ClassModifiersData;\n    activeZone?: AllZones;\n    discoveredZones: DiscoveredZones;\n    zoneModifiers?: ZoneModifiers | ZoneModifiersData;\n    stats: Stats | StatsData;\n    lastBossDefeated?: AllBosses\n}\n\nexport default class Player {\n    activeClassLimit: number;\n    activeClasses: ActiveClasses;\n    unlockedClasses: UnlockedClasses;\n    classModifiers: ClassModifiers;\n    activeZone: AllZones | undefined;\n    discoveredZones: DiscoveredZones;\n    zoneModifiers: ZoneModifiers;\n    stats: Stats;\n    lastBossDefeated: AllBosses | undefined;\n\n    constructor(data: PlayerData) {\n        this.activeClassLimit = data.activeClassLimit;\n        this.activeClasses = [...data.activeClasses];\n        this.unlockedClasses = [...data.unlockedClasses];\n        this.classModifiers = this.loadClassModifiers(data.classModifiers);\n        this.activeZone = data.activeZone;\n        this.discoveredZones = [...data.discoveredZones];\n        this.zoneModifiers = this.loadZoneModifiers(data.zoneModifiers);\n        this.stats = new Stats(data.stats);\n        this.lastBossDefeated = data.lastBossDefeated;\n    }\n\n    getZoneModifier(zoneId: AllZones) {\n        let zoneModifier = this.zoneModifiers[zoneId];\n        if (!zoneModifier) {\n            zoneModifier = new ZoneModifier({ zoneId: zoneId });\n        }\n\n        return zoneModifier;\n    }\n\n    getClassModifier(classId: AllClasses) {\n        let classModifier = this.classModifiers[classId];\n        if (!classModifier) {\n            classModifier = new ClassModifier({ classId });\n            this.classModifiers[classId] = classModifier;\n        }\n\n        return classModifier;\n    }\n\n    setStats(stats: Stats) {\n        this.stats = stats;\n    }\n\n    unlockZone(zoneId: AllZones) {\n        if (this.discoveredZones.indexOf(zoneId) < 0) {\n            this.discoveredZones.push(zoneId);\n        }\n    }\n\n    unlockClass(playerClassId: AllClasses) {\n        if (this.unlockedClasses.indexOf(playerClassId) < 0) {\n            this.unlockedClasses.push(playerClassId);\n        }\n    }\n\n    getActiveZone() {\n        if (this.activeZone) {\n            if (this.discoveredZones.indexOf(this.activeZone) >= 0) {\n                return this.getZoneModifier(this.activeZone);\n            }\n        }\n\n        return undefined;\n    }\n\n    makeClassActive(playerClassId: AllClasses) {\n        if (this.activeClassLimit > this.activeClasses.length) {\n            this.activeClasses.push(playerClassId);\n        } else {\n            this.activeClasses.shift();\n            this.activeClasses.push(playerClassId);\n        }\n    }\n\n    addExperienceToActiveClasses(gameState: GameState) {\n        if (this.activeZone) {\n            const zoneModifier = this.getZoneModifier(this.activeZone);\n            const expReward = zoneModifier.getExperienceReward(this.stats);\n            const modifiedExpReward = gameState.modifierManager.modifyDecimal(expReward, AllModifiers.experienceGain);\n            this.activeClasses.forEach(playerClassId => {\n                const classModifier = this.getClassModifier(playerClassId);\n                classModifier.addExperience(modifiedExpReward);\n                classModifier.checkForLevelUp(this.stats, gameState);\n            });\n        }\n    }\n\n    makeZoneActive(zoneId: AllZones) {\n        this.activeZone = zoneId;\n        return zoneId;\n    }\n\n    getTotalLevel(): Decimal {\n        let output = new Decimal(0);\n        let key: keyof typeof AllClasses;\n        for (key in this.classModifiers) {\n            const classModifier = this.classModifiers[key];\n            if (classModifier) {\n                output = output.plus(classModifier.level);\n            }\n        }\n\n        return output;\n    }\n\n    loadClassModifiers(classModifiersData?: ClassModifiersData): ClassModifiers {\n        const output: ClassModifiers = {};\n\n        if (classModifiersData) {\n            let key: keyof typeof AllClasses;\n            for (key in classModifiersData) {\n                const classModifierData = classModifiersData[key];\n                if (classModifierData) {\n                    output[key] = new ClassModifier(classModifierData);\n                }\n            }\n        }\n\n        return output;\n    }\n\n    loadZoneModifiers(zoneModifiersData?: ZoneModifiersData): ZoneModifiers {\n        const output: ZoneModifiers = {};\n\n        if (zoneModifiersData) {\n            let key: keyof typeof AllZones;\n            for (key in zoneModifiersData) {\n                const zoneModifier = zoneModifiersData[key];\n                if (zoneModifier) {\n                    output[key] = new ZoneModifier(zoneModifier);\n                }\n            }\n        }\n\n        return output;\n    }\n}","import { AllZones } from \"../../zones/allZones\";\n\nconst initialDiscoveredZones = [\n    AllZones.strawberryValleyFields\n]\n\nexport default initialDiscoveredZones;","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\n\nconst initialPlayerStats = new Stats({\n    [StatTypes.strength]: '5',\n    [StatTypes.toughness]: '5',\n    [StatTypes.dexterity]: '5',\n    [StatTypes.intelligence]: '5',\n    [StatTypes.wisdom]: '5',\n    [StatTypes.charisma]: '5',\n});\n\nexport default initialPlayerStats;","import { AllClasses } from \"../../classes/allClasses\";\n\nconst initialUnlockedClasses = [\n    AllClasses.warrior,\n    AllClasses.mage,\n    AllClasses.defender,\n    AllClasses.healer,\n    AllClasses.bard,\n    AllClasses.rogue\n]\n\nexport default initialUnlockedClasses;","import Player from \"../../player/player\";\nimport Stats from \"../../stats/stats\";\nimport initialDiscoveredZones from \"./initialDiscoveredZones\";\nimport initialPlayerStats from \"./initialPlayerStats\";\nimport initialUnlockedClasses from \"./initialUnlockedClasses\";\n\nconst initialPlayer = new Player({\n    activeClassLimit: 1,\n    activeClasses: [],\n    unlockedClasses: [\n        ...initialUnlockedClasses\n    ],\n    discoveredZones: [\n        ...initialDiscoveredZones\n    ],\n    stats: new Stats(initialPlayerStats),\n});\n\nexport default initialPlayer;","import { AllBosses } from \"../battle/bosses/allBosses\";\nimport GameState from \"../gameState\";\nimport BossDefeatedRequirement from \"../unlockables/bossDefeatedRequirement\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllPrestigeSkills } from \"./allPrestigeSkills\";\n\nexport interface PrestigeSkillData {\n    id: AllPrestigeSkills\n    name: string\n    maxLevel: number\n    currentLevel?: number\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>\n}\n\nexport interface InheritedPrestigeSkillData {\n    currentLevel?: number\n}\n\nexport default abstract class PrestigeSkill {\n    id: AllPrestigeSkills\n    name: string\n    maxLevel: number\n    currentLevel: number\n    unlockRequirements: Array<UnlockRequirement>\n\n    constructor(data: PrestigeSkillData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.maxLevel = data.maxLevel;\n        this.currentLevel = data.currentLevel ? data.currentLevel : 0;\n        this.unlockRequirements = data.unlockRequirements ? loadUnlockRequirements(data.unlockRequirements) : [\n            new BossDefeatedRequirement({\n                bossId: AllBosses.brute,\n                minCount: 1\n            })\n        ]\n    }\n\n    increaseLevel(gameState: GameState, numberOfPoints = 1) {\n        if (this.currentLevel + numberOfPoints <= this.maxLevel) {\n            if (gameState.prestige.spendPoints(numberOfPoints)) {\n                this.currentLevel = this.currentLevel + numberOfPoints;\n                this.applySkill(gameState);\n            }\n        }\n    }\n\n    abstract applySkill(gameState: GameState): void\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedLearningPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedLearning,\n            name: AllPrestigeSkills.improvedLearning,\n            maxLevel: 10,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedLearning,\n                group: AllModifiers.experienceGain,\n                multiplicativeValue: new Decimal(1 + (this.currentLevel * .1))\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedTrainingPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedTraining,\n            name: AllPrestigeSkills.improvedTraining,\n            maxLevel: 10,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedTraining,\n                group: AllModifiers.statGain,\n                multiplicativeValue: new Decimal(1 + (this.currentLevel * .1))\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedConsolidatingPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedConsolidating,\n            name: AllPrestigeSkills.improvedConsolidating,\n            maxLevel: 1,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedConsolidating,\n                group: AllModifiers.prestigeStatsGain,\n                additiveValue: new Decimal(.18 * this.currentLevel)\n            })\n        )\n    }\n}","import { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport ImprovedLearningPrestigeSkill from \"./improvedLearning\";\nimport ImprovedTrainingPrestigeSkill from \"./improvedTraining\";\nimport PrestigeSkill, { PrestigeSkillData } from \"../prestigeSkill\";\nimport ImprovedConsolidatingPrestigeSkill from \"./improvedConsolidating\";\n\nconst createPrestigeSkill = (prestigeSkill: PrestigeSkill | PrestigeSkillData) => {\n    switch (prestigeSkill.id) {\n        case AllPrestigeSkills.improvedConsolidating:\n            return new ImprovedConsolidatingPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.improvedLearning:\n            return new ImprovedLearningPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.improvedTraining:\n            return new ImprovedTrainingPrestigeSkill(prestigeSkill);\n        default:\n            throw new Error(prestigeSkill.id + ' is not being handled in creator');\n    }\n}\n\nexport default createPrestigeSkill;","import Decimal from 'decimal.js';\nimport GameState from '../gameState';\nimport { AllModifiers } from '../modifiers/allModifiers';\nimport Player, { PlayerData } from '../player/player';\nimport initialPlayer from '../storage/state/initialPlayer';\nimport { AllPrestigeSkills } from './allPrestigeSkills';\nimport PrestigeSkill, { PrestigeSkillData } from './prestigeSkill';\nimport createPrestigeSkill from './prestigeSkills/prestigeSkillCreator';\n\nconst MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE = 300;\nconst STAT_MULTIPLIER_ON_PRESTIGE = .02;\n\nexport interface PrestigeData {\n    count?: number\n    points?: Decimal | string\n    pointsToGainOnNextPrestige?: Decimal | string\n    prestigeSkills?: Array<PrestigeSkill | PrestigeSkillData>\n    basePlayer?: Player | PlayerData\n}\n\nexport default class Prestige {\n    count: number;\n    points: Decimal;\n    pointsToGainOnNextPrestige: Decimal;\n    prestigeSkills: Array<PrestigeSkill>\n    basePlayer: Player;\n\n    constructor(data: PrestigeData) {\n        this.pointsToGainOnNextPrestige = data.pointsToGainOnNextPrestige ? new Decimal(data.pointsToGainOnNextPrestige) : new Decimal(0);\n        this.prestigeSkills = []\n        this.loadPrestigeSkills(data.prestigeSkills);\n        this.points = data.points ? new Decimal(data.points) : new Decimal(0);\n        this.count = data.count ? data.count : 0;\n        this.basePlayer = data.basePlayer ? new Player(data.basePlayer) : new Player(initialPlayer);\n    }\n\n    applyPrestigeSkills(gameState: GameState) {\n        this.prestigeSkills.forEach(prestigeSkill => {\n            prestigeSkill.applySkill(gameState)\n        });\n    }\n\n    unlockPrestigeSkill(prestigeSkill: PrestigeSkill) {\n        const prestigeSkillUnlocked = this.prestigeSkills.some(prestigeSkillItem => {\n            if (prestigeSkillItem.id === prestigeSkill.id) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (!prestigeSkillUnlocked) {\n            this.prestigeSkills.push(prestigeSkill);\n        }\n    }\n\n    loadPrestigeSkills(prestigeSkills?: Array<PrestigeSkill | PrestigeSkillData>) {\n        if (!prestigeSkills) {\n            return;\n        }\n\n        for (const prestigeSkill of prestigeSkills) {\n            const createdPrestigeSkill = createPrestigeSkill(prestigeSkill)\n            this.unlockPrestigeSkill(createdPrestigeSkill);\n        }\n    }\n\n    addPoints(pointsToAdd: Decimal) {\n        this.pointsToGainOnNextPrestige = this.pointsToGainOnNextPrestige.add(pointsToAdd);\n    }\n\n    spendPoints(pointsToSpend: Decimal | number) {\n        if (this.points.greaterThanOrEqualTo(pointsToSpend)) {\n            this.points = this.points.minus(pointsToSpend);\n            return true;\n        }\n\n        return false;\n    }\n\n    getRequiredLevel() {\n        return MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE;\n    }\n\n    isPretigeAvailable(gameState: GameState) {\n        if (gameState.player.getTotalLevel().greaterThanOrEqualTo(MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getStatMultiplierOnPrestige(gameState: GameState) {\n        return gameState.modifierManager.modifyNumber(STAT_MULTIPLIER_ON_PRESTIGE, AllModifiers.prestigeStatsGain);\n    }\n\n    activatePrestige(gameState: GameState) {\n        if (this.isPretigeAvailable(gameState)) {\n            const statMultiplier = this.getStatMultiplierOnPrestige(gameState);\n            const gainedStats = gameState.player.stats.subtractStatsValue(this.basePlayer.stats);\n            this.basePlayer.stats.addStats(gainedStats.multiplyAllStatsValue(statMultiplier));\n            this.count = this.count + 1;\n            this.points = this.points.plus(this.pointsToGainOnNextPrestige);\n            this.pointsToGainOnNextPrestige = new Decimal(0);\n            const newPlayer = new Player(this.basePlayer);\n            gameState.setPlayer(newPlayer);\n        }\n    }\n}","import Battle, { BattleData } from './battle/battle';\nimport History, { HistoryData } from './history/history';\nimport ModifierManager, { ModifierManagerData } from './modifiers/modifierManager';\nimport Player, { PlayerData } from './player/player';\nimport Prestige, { PrestigeData } from './prestige/prestige';\n\nexport const BASE_GAME_TOPIC = 'gameState';\nexport const GAME_LOOP_TOPIC = BASE_GAME_TOPIC + '.gameLoop';\n\nexport type GameLoopData = {\n    frameTime: number,\n    gameState: GameState\n}\n\nexport type GameLoopFunction = (message: string, data: GameLoopData) => void\nexport type ExecutableLoopFunction = (data: GameLoopData) => void\n\nexport type LoopSubscriptions = {\n    [key in string]: {\n        timeInterval?: number,\n        executableLoopFunction: ExecutableLoopFunction,\n        timeSinceLastExecution: number,\n    }\n}\n\nexport interface GameStateData {\n    player: Player | PlayerData;\n    prestige: Prestige | PrestigeData;\n    fps?: number;\n    lastExecutionTime?: number;\n    history?: History | HistoryData;\n    modifierManager?: ModifierManager | ModifierManagerData\n}\n\nexport default class GameState {\n    player: Player;\n    prestige: Prestige;\n    fps: number;\n    lastExecutionTime: number | undefined;\n    loopSubscriptions: LoopSubscriptions;\n    battle: Battle | undefined;\n    history: History;\n    modifierManager: ModifierManager\n\n\n    constructor(data: GameStateData) {\n        this.player = new Player(data.player);\n        this.prestige = new Prestige(data.prestige);\n        this.fps = data.fps ? data.fps : 30;\n        this.lastExecutionTime = undefined;\n        this.loopSubscriptions = {};\n        this.history = data.history ? new History(data.history) : new History({});\n        this.modifierManager = data.modifierManager ? new ModifierManager(data.modifierManager) : new ModifierManager({});\n        this.prestige.applyPrestigeSkills(this);\n    }\n\n    setPlayer(player: Player) {\n        this.player = player;\n    }\n\n    addLoopSubscription(id: string, executableLoopFunction: ExecutableLoopFunction, timeInterval?: number) {\n        this.loopSubscriptions[id] = {\n            timeInterval: timeInterval,\n            executableLoopFunction: executableLoopFunction,\n            timeSinceLastExecution: 0,\n        }\n        console.log(this);\n    }\n\n    removeSubscriptions(ids: string[]) {\n        for (const id of ids) {\n            if (this.loopSubscriptions[id]) {\n                delete this.loopSubscriptions[id];\n            }\n        }\n    }\n\n    executeLoopFunction(id: string, data: GameLoopData) {\n        const loopSubscription = this.loopSubscriptions[id];\n        if (loopSubscription) {\n            if (loopSubscription.timeInterval) {\n                loopSubscription.timeSinceLastExecution += data.frameTime;\n                if (loopSubscription.timeSinceLastExecution / 1000 >= loopSubscription.timeInterval) {\n                    loopSubscription.executableLoopFunction(data);\n                    loopSubscription.timeSinceLastExecution = 0;\n                }\n            } else {\n                loopSubscription.executableLoopFunction(data);\n            }\n        }\n    }\n\n    gameLoop(executionTime: number) {\n        let frameTime = 0;\n        if (this.lastExecutionTime) {\n            frameTime = executionTime - this.lastExecutionTime;\n        }\n        const gameLoopData: GameLoopData = {\n            gameState: this,\n            frameTime: frameTime\n        }\n        Object.keys(this.loopSubscriptions).forEach(key => {\n            this.executeLoopFunction(key, gameLoopData);\n        });\n        this.lastExecutionTime = executionTime;\n    }\n}","import Player from \"../../player/player\";\nimport Prestige from \"../../prestige/prestige\";\nimport initialPlayer from \"./initialPlayer\";\n\nconst defaultGameState = {\n    player: new Player(initialPlayer),\n    prestige: new Prestige({})\n}\n\nexport default defaultGameState;","import { createContext } from \"react\";\nimport GameState from \"../game/gameState\";\nimport defaultGameState from \"../game/storage/state/initialGameState\";\n\nconst GameContext = createContext({\n    gameState: new GameState(defaultGameState),\n    lastFrameTime: performance.now()\n});\nexport default GameContext;","import { Progress } from \"antd\";\nimport { useContext } from \"react\";\nimport GameContext from \"../gameContext\";\n\nexport type GameLoopProgressData = {\n    gameLoopId: string,\n    rate?: number\n}\n\n\nexport default function GameLoopProgress({ gameLoopId, rate }: GameLoopProgressData) {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n\n    const getPercentageUntilNextExecution = () => {\n        if (gameState.loopSubscriptions[gameLoopId] && rate) {\n            const timeDifference = gameState.loopSubscriptions[gameLoopId].timeSinceLastExecution / 1000;\n            return timeDifference / rate * 100;\n        }\n\n        return 0;\n\n    }\n\n    return (\n        <Progress percent={getPercentageUntilNextExecution()} showInfo={false} />\n    )\n}","export default function toCapitalizedWords(name?: string, empty = 'Unknown') {\n    if (!name) {\n        return empty;\n    }\n    var words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n    return words.map(capitalize).join(\" \");\n}\n\nfunction capitalize(word: string) {\n    return word.charAt(0).toUpperCase() + word.substring(1);\n}","import { Avatar, Button, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport { GiBrute, GiCharacter, GiSpectre } from \"react-icons/gi\";\nimport Battle from \"../game/battle/battle\";\nimport { AllBosses } from \"../game/battle/bosses/allBosses\";\nimport getNextBossId from \"../game/battle/bosses/bossFightOrder\";\nimport initializeBoss from \"../game/battle/bosses/iniitializeBoss\";\nimport { BOSS_ATTACK_LOOP_ID, PLAYER_ATTACK_LOOP_ID } from \"../game/loopFunctions/battle/battleEntityAttack\";\nimport GameLoopProgress from \"./components/gameLoopProgress\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nconst bossIconMap = {\n    [AllBosses.brute]: (<GiBrute />),\n    [AllBosses.spectre]: (<GiSpectre />)\n}\n\nexport default function BossBattle() {\n    const appState = useContext(GameContext);\n    const battle = appState.gameState.battle;\n    const nextBossId = getNextBossId(appState.gameState);\n\n    function createPlayerDisplay(bossBattle: Battle) {\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>Player</Typography.Title>\n                <Avatar size=\"large\" icon={<GiCharacter />} />\n                <GameLoopProgress gameLoopId={PLAYER_ATTACK_LOOP_ID} rate={bossBattle.player.attackInterval} />\n                <Typography.Text>HP: {bossBattle.player.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {bossBattle.player.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {bossBattle.player.defenseValue.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function createBossDisplay(bossBattle: Battle) {\n        const bossIcon = bossIconMap[bossBattle.boss.id];\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>{toCapitalizedWords(bossBattle.boss.name, 'Boss')}</Typography.Title>\n                <Avatar size=\"large\" icon={bossIcon} />\n                <GameLoopProgress gameLoopId={BOSS_ATTACK_LOOP_ID} rate={bossBattle.boss.attackInterval} />\n                <Typography.Text>HP: {bossBattle.boss.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {bossBattle.boss.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {bossBattle.boss.defenseValue.toString()}</Typography.Text>\n                <Typography.Text>Reward:</Typography.Text>\n                <Typography.Text>Prestige Points: {bossBattle.boss.prestigePoints.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function createPreFightDisplay(bossId: AllBosses) {\n        const bossIcon = bossIconMap[bossId];\n        const boss = initializeBoss(bossId);\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>{toCapitalizedWords(boss.name, 'Boss')}</Typography.Title>\n                <Avatar size=\"large\" icon={bossIcon} />\n                <Typography.Text>HP: {boss.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {boss.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {boss.defenseValue.toString()}</Typography.Text>\n                <Typography.Text>Player Attack Stat: {boss.playerAttackStat}</Typography.Text>\n                <Typography.Text>Player Defense Stat: {boss.playerDefenseStat}</Typography.Text>\n                <Typography.Text>Reward:</Typography.Text>\n                <Typography.Text>Prestige Points: {boss.prestigePoints.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function startFightClickHandler() {\n        appState.gameState.battle = new Battle({\n            bossId: AllBosses.brute,\n            gameState: appState.gameState\n        });\n    }\n\n    const createBattleDisplay = () => {\n        if (battle) {\n            return (\n                <Space direction=\"horizontal\">\n                    {createPlayerDisplay(battle)}\n                    {createBossDisplay(battle)}\n                </Space>\n            )\n        }\n\n        if (nextBossId) {\n            return createPreFightDisplay(nextBossId);\n\n        }\n\n        return (\n            <Typography.Text>No more bosses left to fight</Typography.Text>\n        )\n    }\n\n    const fightButtonDisabled = battle || !nextBossId ? true : false;\n\n    return (\n        <Space direction=\"vertical\">\n            <Button onClick={startFightClickHandler} disabled={fightButtonDisabled}>Start Fight</Button>\n            {createBattleDisplay()}\n        </Space>\n    )\n}","import { Col, Divider, List, Row, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport { AllClasses } from \"../game/classes/allClasses\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nexport default function ClassPicker() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n    const player = gameState.player;\n\n    const createChangeActiveClassHandler = (classId: AllClasses) => {\n        return () => {\n            return player.makeClassActive(classId);\n        }\n    }\n\n    const generateClassListItem = (classId: AllClasses) => {\n        const classModifier = player.getClassModifier(classId);\n        return (\n            <List.Item key={'unlocked-' + classId} onClick={createChangeActiveClassHandler(classId)} style={{ display: 'block' }}>\n                <Typography.Title>{toCapitalizedWords(classModifier.getName(), 'Select a class to make active')}</Typography.Title>\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Level: {classModifier.level.toString()}</Typography.Text>\n                            <Typography.Text>Experience: {classModifier.experience.toString()}</Typography.Text>\n                            <Typography.Text>Experience to Level: {classModifier.getExperienceRequiredToLevel().toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Strength: {classModifier.getModifiedStats(gameState).strength.toString()}</Typography.Text>\n                            <Typography.Text>Toughness: {classModifier.getModifiedStats(gameState).toughness.toString()}</Typography.Text>\n                            <Typography.Text>Dexterity: {classModifier.getModifiedStats(gameState).dexterity.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Intelligence: {classModifier.getModifiedStats(gameState).intelligence.toString()}</Typography.Text>\n                            <Typography.Text>Wisdom: {classModifier.getModifiedStats(gameState).wisdom.toString()}</Typography.Text>\n                            <Typography.Text>Charisma: {classModifier.getModifiedStats(gameState).charisma.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                </Row>\n                <Divider />\n            </List.Item>\n        )\n    }\n\n    const generateActiveClassesDisplay = () => {\n        return player.activeClasses.map((classId) => {\n            const classModifier = player.getClassModifier(classId);\n            return (\n                <Typography.Title key={'active-' + classId} level={2}>{toCapitalizedWords(classModifier.getName(), 'Select a class to make active')} {classModifier.level.toString()}</Typography.Title>\n            )\n        });\n    }\n\n    return (\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Divider>Active Classes ({player.activeClasses.length}/{player.activeClassLimit})</Divider>\n            {generateActiveClassesDisplay()}\n            <Divider>Unlocked Classes</Divider>\n            <List\n                dataSource={player.unlockedClasses}\n                renderItem={item => generateClassListItem(item)}\n                size=\"large\"\n                bordered\n                itemLayout=\"vertical\"\n            />\n        </Space>\n    )\n}","import { useContext } from \"react\";\nimport GameContext from \"./gameContext\";\nimport { Avatar, Button, Divider, List, Space, Typography } from \"antd\";\nimport { AllPrestigeSkills } from \"../game/prestige/allPrestigeSkills\";\nimport { GiAura, GiJumpingRope, GiRead } from \"react-icons/gi\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\nimport PrestigeSkill from \"../game/prestige/prestigeSkill\";\n\nconst PRESTIGE_SKILL_ICON_MAP = {\n    [AllPrestigeSkills.improvedConsolidating]: (<GiAura />),\n    [AllPrestigeSkills.improvedLearning]: (<GiRead />),\n    [AllPrestigeSkills.improvedTraining]: (<GiJumpingRope />)\n}\n\nexport default function PrestigeActivation() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n    const player = gameState.player;\n    const prestige = gameState.prestige;\n\n    const prestigeClick = () => {\n        prestige.activatePrestige(gameState);\n    }\n\n    const createPrestigeSkillClickHandler = (prestigeSkill: PrestigeSkill) => {\n        return () => {\n            prestigeSkill.increaseLevel(gameState);\n        }\n    }\n\n    const createPrestigeSkillGrid = () => {\n        if (!prestige.prestigeSkills.length) {\n            return null;\n        }\n\n        return (\n            <List\n                grid={{\n                    gutter: 16,\n                }}\n                dataSource={prestige.prestigeSkills}\n                renderItem={prestigeSkill => (\n                    <List.Item onClick={createPrestigeSkillClickHandler(prestigeSkill)}>\n                        <Space direction=\"vertical\">\n                            <Avatar size=\"large\" icon={PRESTIGE_SKILL_ICON_MAP[prestigeSkill.id]}></Avatar>\n                            <Typography.Text>{toCapitalizedWords(prestigeSkill.name)}</Typography.Text>\n                            <Typography.Text>{prestigeSkill.currentLevel}/{prestigeSkill.maxLevel}</Typography.Text>\n                        </Space>\n                    </List.Item>\n                )}\n            />\n        )\n    }\n\n    return (\n        <Space direction=\"vertical\">\n            <Typography.Text>Prestige Points: {prestige.points.toString()}</Typography.Text>\n            <Typography.Text>You must reach a high enough level to prestige: {player.getTotalLevel().toString()}/{prestige.getRequiredLevel().toString()}</Typography.Text>\n            <Typography.Text>{prestige.getStatMultiplierOnPrestige(gameState) * 100}% of your current stats will be added to your base stats on reset</Typography.Text>\n            <Typography.Text>You will lose discovered zones</Typography.Text>\n            <Typography.Text>You will lose unlocked classes</Typography.Text>\n            <Typography.Text>Points gained on prestige: {prestige.pointsToGainOnNextPrestige.toString()}</Typography.Text>\n            <Button disabled={!prestige.isPretigeAvailable(gameState)} onClick={prestigeClick}>Prestige</Button>\n            <Divider>Skills</Divider>\n            {createPrestigeSkillGrid()}\n        </Space>\n    )\n}","import GameState from \"../gameState\";\n\nexport const GAME_SAVE_KEY = 'iliumIdleClasser';\n\nexport default function saveGame(gameState: GameState) {\n    return saveGameToLocalStorage(gameState);\n}\n\nfunction saveGameToLocalStorage(gameState: GameState) {\n    window.localStorage.setItem(GAME_SAVE_KEY, JSON.stringify(gameState));\n}","import GameState, { GameStateData } from \"../gameState\";\nimport { GAME_SAVE_KEY } from \"./saveGame\";\nimport defaultGameState from \"./state/initialGameState\";\n\nexport const LOCAL_STORAGE_SAVE_TYPE = 'localStorage';\n\nexport default function loadGame(saveType = LOCAL_STORAGE_SAVE_TYPE) {\n    return loadGameFromLocalStorage();\n}\n\nfunction loadGameFromLocalStorage() {\n    const gameData = window.localStorage.getItem(GAME_SAVE_KEY);\n\n    if (gameData) {\n        try {\n            return new GameState(JSON.parse(gameData) as GameStateData);\n        } catch (err) {\n            console.log('Failed to load game state');\n            console.log(err);\n        }\n    }\n\n    return new GameState(defaultGameState);\n}","import { LOCAL_STORAGE_SAVE_TYPE } from \"./loadGame\";\nimport { GAME_SAVE_KEY } from \"./saveGame\";\n\nexport default function clearSavedGame(saveType = LOCAL_STORAGE_SAVE_TYPE) {\n    clearSavedGameFromLocalStorage();\n}\n\nfunction clearSavedGameFromLocalStorage() {\n    window.localStorage.removeItem(GAME_SAVE_KEY);\n}","import { Button, Space } from \"antd\";\nimport { useContext } from \"react\";\nimport clearSavedGame from \"../game/storage/clearSavedGame\";\nimport GameContext from \"./gameContext\";\n\nexport default function SettingsPanel() {\n    const appState = useContext(GameContext);\n\n    const clearSavedGameDataHandler = () => {\n        clearSavedGame();\n        window.location.reload();\n    }\n\n    return (\n        <Space direction=\"vertical\">\n            <Button onClick={clearSavedGameDataHandler}>Clear Saved Data</Button>\n        </Space>\n    )\n}","import { Divider, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport GameContext from \"./gameContext\";\n\nconst { Text } = Typography;\n\nexport default function StatsViewer() {\n    const appState = useContext(GameContext);\n    const player = appState.gameState.player;\n\n    const createStatsPanel = () => {\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Stats</Divider>\n                <Text>Strength: {player.stats.strength.toString()}</Text>\n                <Text>Toughness: {player.stats.toughness.toString()}</Text>\n                <Text>Dexterity: {player.stats.dexterity.toString()}</Text>\n                <Text>Wisdom: {player.stats.wisdom.toString()}</Text>\n                <Text>Intelligence: {player.stats.intelligence.toString()}</Text>\n                <Text>Charisma: {player.stats.charisma.toString()}</Text>\n            </Space>\n        );\n    }\n\n    const createLevelsPanel = () => {\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Levels</Divider>\n                <Text>Level: {player.getTotalLevel().toString()}</Text>\n                {Object.values(player.classModifiers).map(classModifier => {\n                    return (\n                        <Text key={'levels-' + classModifier.classId}>{toCapitalizedWords(classModifier.getName())} level: {classModifier.level.toString()}</Text>\n                    )\n                })}\n            </Space>\n        );\n    }\n\n    const createActivityPanel = () => {\n        const activeZoneName = player.activeZone ? toCapitalizedWords(player.activeZone) : 'No Active Zone';\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Activity</Divider>\n                <Typography.Title level={5}>Active Zone: {activeZoneName}</Typography.Title>\n                <Typography.Title level={5}>Active Classes</Typography.Title>\n                {player.activeClasses.map(classId => {\n                    const classModifier = player.getClassModifier(classId);\n                    return (\n                        <Text key={'activity-' + classId}>{toCapitalizedWords(classModifier.getName())} - {classModifier.level.toString()} - ({classModifier.experience.toString()}/{classModifier.getExperienceRequiredToLevel().toString()})</Text>\n                    )\n                })}\n            </Space>\n        );\n    }\n\n    function toCapitalizedWords(name: string) {\n        var words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n        return words.map(capitalize).join(\" \");\n    }\n\n    function capitalize(word: string) {\n        return word.charAt(0).toUpperCase() + word.substring(1);\n    }\n\n    return (\n        <Space direction=\"horizontal\">\n            {createStatsPanel()}\n            {createLevelsPanel()}\n            {createActivityPanel()}\n        </Space>\n    )\n}","import { GameLoopData } from \"../../gameState\";\n\nexport const ZONE_LOOP_ID = \"zone\";\n\nexport default function gainRewards(data: GameLoopData) {\n    console.log(data);\n    data.gameState.player.addExperienceToActiveClasses(data.gameState);\n}","import { Col, Divider, List, Row, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport gainRewards, { ZONE_LOOP_ID } from \"../game/loopFunctions/zones/gainRewards\";\nimport { AllZones } from \"../game/zones/allZones\";\nimport GameLoopProgress from \"./components/gameLoopProgress\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nexport default function ZonePicker() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n\n    const createSetActiveZoneHandler = (zoneId: AllZones) => {\n        return () => {\n            gameState.player.makeZoneActive(zoneId);\n            gameState.addLoopSubscription(ZONE_LOOP_ID, gainRewards, gameState.player.getZoneModifier(zoneId).getRate());\n        }\n    }\n\n    const generateZoneListItem = (zoneId: AllZones) => {\n        const zoneModifier = gameState.player.getZoneModifier(zoneId);\n        return (\n            <List.Item onClick={createSetActiveZoneHandler(zoneId)} style={{ display: 'block' }}>\n                <Typography.Title>{toCapitalizedWords(zoneModifier.getName())}</Typography.Title>\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Time to Complete: {zoneModifier.getRate().toString()}s</Typography.Text>\n                            <Typography.Text>Minimum Exp Reward: {zoneModifier.getModifiedMinExp().toString()}</Typography.Text>\n                            <Typography.Text>Maximum Exp Reward: {zoneModifier.getModifiedMaxExp().toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Strength: {zoneModifier.getStats().strength.toString()}</Typography.Text>\n                            <Typography.Text>Toughness: {zoneModifier.getStats().toughness.toString()}</Typography.Text>\n                            <Typography.Text>Dexterity: {zoneModifier.getStats().dexterity.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Intelligence: {zoneModifier.getStats().intelligence.toString()}</Typography.Text>\n                            <Typography.Text>Wisdom: {zoneModifier.getStats().wisdom.toString()}</Typography.Text>\n                            <Typography.Text>Charisma: {zoneModifier.getStats().charisma.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                </Row>\n                <Divider />\n            </List.Item>\n        )\n    }\n\n    return (\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Typography.Title level={2}>{toCapitalizedWords(gameState.player.activeZone, 'Select a zone to make active')}</Typography.Title>\n            <GameLoopProgress gameLoopId={ZONE_LOOP_ID} rate={gameState.player.getActiveZone()?.getRate()} />\n            <List\n                dataSource={gameState.player.discoveredZones}\n                renderItem={item => generateZoneListItem(item)}\n                size=\"large\"\n                bordered\n                itemLayout=\"vertical\"\n            />\n        </Space>\n    )\n}","import { Layout, Menu } from 'antd';\nimport { useState } from 'react';\nimport { GiCharacter, GiSkills, GiWorld, GiUpgrade, GiCog, GiBossKey } from 'react-icons/gi';\nimport BossBattle from './bossBattle';\nimport ClassPicker from './classPicker';\nimport PrestigeActivation from './prestigeActivation';\nimport SettingsPanel from './settingsPanel';\nimport StatsViewer from './statsViewer';\nimport ZonePicker from './zonePicker';\n\nconst { Header, Content, Sider } = Layout;\n\nexport default function PageLayout() {\n    const [mainContent, setMainContent] = useState(<ClassPicker />);\n\n    const showClassPicker = () => {\n        setMainContent(<ClassPicker />);\n    }\n\n    const showStatsViewer = () => {\n        setMainContent(<StatsViewer />);\n    }\n\n    const showZonePicker = () => {\n        setMainContent(<ZonePicker />);\n    }\n\n    const showPrestigeActivation = () => {\n        setMainContent(<PrestigeActivation />);\n    }\n\n    const showSettingsPanel = () => {\n        setMainContent(<SettingsPanel />);\n    }\n\n    const showBossBattle = () => {\n        setMainContent(<BossBattle />);\n    }\n\n    return (\n        <Layout>\n            <Sider\n                style={{\n                    overflow: 'auto',\n                    height: '100vh',\n                    position: 'fixed',\n                    left: 0,\n                }}\n            >\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                    <Menu.Item key=\"1\" onClick={showClassPicker} icon={<GiCharacter />}>\n                        Class\n                    </Menu.Item>\n                    <Menu.Item key=\"2\" onClick={showStatsViewer} icon={<GiSkills />}>\n                        Stats\n                    </Menu.Item>\n                    <Menu.Item key=\"3\" onClick={showZonePicker} icon={<GiWorld />}>\n                        Zone\n                    </Menu.Item>\n                    <Menu.Item key=\"4\" onClick={showPrestigeActivation} icon={<GiUpgrade />}>\n                        Prestige\n                    </Menu.Item>\n                    <Menu.Item key=\"5\" onClick={showBossBattle} icon={<GiBossKey />}>\n                        Boss\n                    </Menu.Item>\n                    <Menu.Item key=\"6\" onClick={showSettingsPanel} icon={<GiCog />}>\n                        Settings\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n                <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n                    <div className=\"site-layout-background\" style={{ padding: 24, textAlign: 'center' }}>\n                        {mainContent}\n                    </div>\n                </Content>\n            </Layout>\n        </Layout>\n    )\n}","import GameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\n\nexport default function meetsAllUnlockRequirements(gameState: GameState, unlockRequirements: Array<UnlockRequirement>): boolean {\n    for (const unlockRequirement of unlockRequirements) {\n        if (!unlockRequirement.requirementsMet(gameState)) {\n            return false;\n        }\n    }\n\n    return true;\n}","import { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport ImprovedConsolidatingPrestigeSkill from \"./improvedConsolidating\";\nimport ImprovedLearningPrestigeSkill from \"./improvedLearning\";\nimport ImprovedTrainingPrestigeSkill from \"./improvedTraining\";\n\nconst allPrestigeSkillsInitialized = {\n    [AllPrestigeSkills.improvedConsolidating]: new ImprovedConsolidatingPrestigeSkill({}),\n    [AllPrestigeSkills.improvedLearning]: new ImprovedLearningPrestigeSkill({}),\n    [AllPrestigeSkills.improvedTraining]: new ImprovedTrainingPrestigeSkill({}),\n}\n\nexport default allPrestigeSkillsInitialized;","import { GameLoopData } from \"../../gameState\";\nimport unlockClasses from \"./unlockClasses\";\nimport unlockPrestigeSkills from \"./unlockPrestigeSkills\";\nimport unlockZones from \"./unlockZones\";\n\nexport const UNLOCK_UNLOCKABLES_LOOP_ID = \"unlockUnlockables\";\n\nexport default function unlockAllUnlockables(data: GameLoopData) {\n    unlockClasses(data.gameState);\n    unlockZones(data.gameState);\n    unlockPrestigeSkills(data.gameState);\n}","import allClassesInitialized from \"../../classes/allClassesInitialized\";\nimport GameState from \"../../gameState\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\n\nexport default function unlockClasses(gameState: GameState) {\n    Object.values(allClassesInitialized).forEach(playerClass => {\n        if (meetsAllUnlockRequirements(gameState, playerClass.unlockRequirements)) {\n            gameState.player.unlockClass(playerClass.id);\n        }\n    });\n}","import GameState from \"../../gameState\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\nimport allZonesInitialized from \"../../zones/allZonesInitialized\";\n\nexport default function unlockZones(gameState: GameState) {\n    Object.values(allZonesInitialized).forEach(zone => {\n        if (meetsAllUnlockRequirements(gameState, zone.unlockRequirements)) {\n            gameState.player.unlockZone(zone.id);\n        }\n    });\n}","import GameState from \"../../gameState\";\nimport allPrestigeSkillsInitialized from \"../../prestige/prestigeSkills/allPrestigeSkillsInitialized\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\n\nexport default function unlockPrestigeSkills(gameState: GameState) {\n    Object.values(allPrestigeSkillsInitialized).forEach(prestigeSkill => {\n        if (meetsAllUnlockRequirements(gameState, prestigeSkill.unlockRequirements)) {\n            gameState.prestige.unlockPrestigeSkill(prestigeSkill);\n        }\n    });\n}","import { GameLoopData } from \"../../gameState\";\nimport saveGame from \"../../storage/saveGame\";\n\nexport const SAVE_GAME_LOOP_ID = 'saveGame';\n\nexport default function saveGameLoopFunction(data: GameLoopData) {\n    saveGame(data.gameState);\n}","import PageLayout from \"./ui/pageLayout\";\nimport \"./App.css\";\nimport React from \"react\";\nimport GameContext from \"./ui/gameContext\";\nimport useInterval from \"./useInterval\";\nimport unlockAllUnlockables, { UNLOCK_UNLOCKABLES_LOOP_ID } from \"./game/loopFunctions/unlockables/allUnlockables\";\nimport saveGameLoopFunction, { SAVE_GAME_LOOP_ID } from \"./game/loopFunctions/storage/saveGame\";\nimport loadGame from \"./game/storage/loadGame\";\nimport gainRewards, { ZONE_LOOP_ID } from \"./game/loopFunctions/zones/gainRewards\";\nimport Decimal from \"decimal.js\";\n\nconst PRECISION_SIZE = 5;\nDecimal.config({ precision: PRECISION_SIZE });\n\nexport default function App() {\n  const [gameState, setGameState] = React.useState(loadGame());\n  const [lastFrameTime, setLastFrameTime] = React.useState(performance.now());\n\n  const appState = {\n    gameState,\n    lastFrameTime\n  }\n\n  if (!gameState.loopSubscriptions[UNLOCK_UNLOCKABLES_LOOP_ID]) {\n    gameState.addLoopSubscription(UNLOCK_UNLOCKABLES_LOOP_ID, unlockAllUnlockables, 2);\n  }\n\n  if (!gameState.loopSubscriptions[SAVE_GAME_LOOP_ID]) {\n    gameState.addLoopSubscription(SAVE_GAME_LOOP_ID, saveGameLoopFunction, 5);\n  }\n\n  if (gameState.player.activeZone && !gameState.loopSubscriptions[ZONE_LOOP_ID]) {\n    gameState.addLoopSubscription(ZONE_LOOP_ID, gainRewards, gameState.player.getZoneModifier(gameState.player.activeZone).getRate());\n  }\n\n  useInterval(() => {\n    setLastFrameTime(performance.now());\n    gameState.gameLoop(lastFrameTime);\n  }, 1000 / gameState.fps);\n\n  return (\n    <GameContext.Provider value={appState}>\n      <PageLayout />\n    </GameContext.Provider>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}