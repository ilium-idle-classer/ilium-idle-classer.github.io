{"version":3,"sources":["game/modifiers/allModifiers.tsx","game/loopFunctions/battle/battleEntityAttack.tsx","game/loopFunctions/battle/battleOver.tsx","game/battle/bosses/allBosses.tsx","game/stats/statsEnum.tsx","game/battle/battleEntity.tsx","game/battle/battlePlayer.tsx","game/battle/boss.tsx","game/battle/bosses/brain.tsx","game/battle/bosses/brute.tsx","game/battle/bosses/spectre.tsx","game/battle/bosses/initializeBoss.tsx","game/battle/battle.tsx","game/battle/bosses/bossFightOrder.tsx","game/classes/allClasses.tsx","game/history/history.tsx","game/stats/stats.tsx","game/unlockables/unlockRequirementTypes.tsx","game/unlockables/unlockRequirement.tsx","game/unlockables/bossDefeatedRequirement.tsx","game/unlockables/classLevelRequirement.tsx","game/unlockables/playerLevelRequirement.tsx","game/unlockables/prestigeCountRequirement.tsx","game/unlockables/prestigeSkillRequirement.tsx","game/unlockables/statMinimumsRequirement.tsx","game/unlockables/loadUnlockRequirements.tsx","game/prestige/allPrestigeSkills.tsx","game/classes/class.tsx","game/classes/baseClasses/bardPlayerClass.tsx","game/classes/baseClasses/defenderPlayerClass.tsx","game/classes/baseClasses/healerPlayerClass.tsx","game/classes/baseClasses/magePlayerClass.tsx","game/classes/baseClasses/roguePlayerClass.tsx","game/classes/baseClasses/warriorPlayerClass.tsx","game/classes/tierOneClasses/archerPlayerClass.tsx","game/classes/tierOneClasses/clericPlayerClass.tsx","game/classes/tierOneClasses/dancerPlayerClass.tsx","game/classes/tierOneClasses/fighterPlayerClass.tsx","game/classes/tierOneClasses/monkPlayerClass.tsx","game/classes/tierOneClasses/soldierPlayerClass.tsx","game/classes/tierOneClasses/wizardPlayerClass.tsx","game/classes/tierThreeClasses/assassinPlayerClass.tsx","game/classes/tierThreeClasses/empathPlayerClass.tsx","game/classes/tierThreeClasses/fleshWarperPlayerClass.tsx","game/classes/tierThreeClasses/priestPlayerClass.tsx","game/classes/tierTwoClasses/enchanterPlayerClass.tsx","game/classes/tierTwoClasses/necromancerPlayerClass.tsx","game/classes/tierTwoClasses/shadowKnightPlayerClass.tsx","game/classes/tierTwoClasses/shieldPlayerClass.tsx","game/classes/tierTwoClasses/slayerPlayerClass.tsx","game/classes/allClassesInitialized.tsx","game/unlockables/meetsAllUnlockRequirements.tsx","game/zones/allZones.tsx","game/modifiers/modifier.tsx","game/prestige/prestigeSkill.tsx","game/prestige/prestigeSkills/attackSpeedPrestigeSkill.tsx","game/prestige/prestigeSkills/improvedConsolidating.tsx","game/prestige/prestigeSkills/improvedConsolidatingTwo.tsx","game/prestige/prestigeSkills/improvedLearning.tsx","game/prestige/prestigeSkills/improvedTraining.tsx","game/prestige/prestigeSkills/monkMastery.tsx","game/prestige/prestigeSkills/prestigious.tsx","game/prestige/prestigeSkills/unlockDepravedDungeon.tsx","game/prestige/prestigeSkills/unlockFleshWarperPrestigeSkill.tsx","game/prestige/prestigeSkills/allPrestigeSkillsInitialized.tsx","game/zones/zone.tsx","game/zones/baseZones/strawberryValleyFieldsZone.tsx","game/zones/tierOneZones/berryRidgeRangeZone.tsx","game/zones/tierOneZones/oldStoneFarmZone.tsx","game/zones/tierOneZones/quietSandsZone.tsx","game/zones/tierOneZones/smallPawsAcresZone.tsx","game/zones/tierThreeZones/firebranchNurseryZone.tsx","game/zones/tierThreeZones/theDepravedDungeonZone.tsx","game/zones/tierThreeZones/theDryBurrowsZone.tsx","game/zones/tierTwoZones/moonshadowOrchardZone.tsx","game/zones/tierTwoZones/rattlesnakeFarmZone.tsx","game/zones/tierTwoZones/westwoodGardensZone.tsx","game/zones/allZonesInitialized.tsx","game/loopFunctions/unlockables/allUnlockables.tsx","game/loopFunctions/unlockables/unlockClasses.tsx","game/loopFunctions/unlockables/unlockZones.tsx","game/loopFunctions/unlockables/unlockPrestigeSkills.tsx","game/modifiers/modifierManager.tsx","game/player/classModifier.tsx","game/player/zoneModifier.tsx","game/player/player.tsx","game/storage/state/initialDiscoveredZones.tsx","game/storage/state/initialPlayerStats.tsx","game/storage/state/initialUnlockedClasses.tsx","game/storage/state/initialPlayer.tsx","game/prestige/prestigeSkills/prestigeSkillCreator.tsx","game/prestige/prestige.tsx","game/gameState.tsx","game/storage/state/initialGameState.tsx","ui/gameContext.tsx","ui/components/gameLoopProgress.tsx","ui/helpers/capitalizeAndAddSpacing.tsx","ui/bossBattle.tsx","ui/classPicker.tsx","ui/prestigeActivation.tsx","game/storage/saveGame.tsx","game/storage/loadGame.tsx","game/storage/clearSavedGame.tsx","ui/settingsPanel.tsx","ui/statsViewer.tsx","game/loopFunctions/zones/gainRewards.tsx","ui/zonePicker.tsx","ui/pageLayout.tsx","game/loopFunctions/storage/saveGame.tsx","App.tsx","useInterval.js","reportWebVitals.ts","index.tsx"],"names":["AllModifiers","PLAYER_ATTACK_LOOP_ID","BOSS_ATTACK_LOOP_ID","playerAttackLoopFunction","data","battle","gameState","playerAttack","bossAttackLoopFunction","bossAttack","BATTLE_OVER_LOOP_ID","battleOverLoopFunction","player","isDefeated","stopBattle","boss","prestigePointGain","modifierManager","modifyDecimal","prestigePoints","prestige","addPoints","lastBossDefeated","id","history","addDefeatedBoss","gainRewards","removeSubscriptions","undefined","AllBosses","StatTypes","BattleEntity","hp","attackValue","defenseValue","bonusDamage","attackInterval","this","Decimal","plus","div","target","max","minus","eq","BattlePlayer","stats","get","attackStat","defenseStat","Boss","name","playerAttackStat","playerDefenseStat","Brain","brain","toughness","intelligence","Brute","brute","strength","Spectre","spectre","wisdom","charisma","initializeBoss","bossId","Error","Battle","playerAttackInterval","modifyNumber","attackSpeed","console","log","addLoopSubscription","attack","bossFightOrder","AllClasses","History","bossesDefeated","defeatedBossCount","dexterity","UnlockRequirementTypes","Stats","incrementalStats","multiplier","times","additive","statName","lessThan","UnlockRequirement","prestigeSkillId","classType","requiredLevel","minCount","BossDefeatedRequirement","bossDefeated","getBossDefeatedCount","ClassLevelRequirement","classLevel","unlockedClasses","includes","getClassModifier","level","greaterThanOrEqualTo","PlayerLevelRequirement","playerLevel","getTotalLevel","PrestigeCountRequirement","prestigeCount","count","PrestigeSkillRequirement","prestigeSkill","getPrestigeSkill","currentLevel","StatMinimumsRequirement","statMinimums","isGreaterThanOrEqualTo","loadUnlockRequirements","output","unlockRequirementData","push","AllPrestigeSkills","PlayerClass","unlockRequirements","experience","levelUpStats","BardPlayerClass","updatedData","bard","DefenderPlayerClass","defender","HealerPlayerClass","healer","MagePlayerClass","mage","RoguePlayerClass","rogue","WarriorPlayerClass","warrior","ArcherPlayerClass","archer","ClericPlayerClass","cleric","DancerPlayerClass","dancer","FighterPlayerClass","fighter","MonkPlayerClass","monk","SoldierPlayerClass","soldier","WizardPlayerClass","wizard","AssassinPlayerClass","assassin","slayer","EmpathPlayerClass","empath","enchanter","FleshWarperPlayerClass","fleshwarper","unlockFleshWarper","PriestPlayerClass","priest","EnchanterPlayerClass","NecromancerPlayerClass","necromancer","ShadowKnightPlayerClass","shadowknight","ShieldPlayerClass","shield","SlayerPlayerClass","allClassesInitialized","meetsAllUnlockRequirements","requirementsMet","AllZones","Modifier","group","additiveValue","multiplicativeValue","gains","addToStatGains","multiplyStatGains","addToGain","multiplyGain","toNumber","statGains","multiplyAllStatsValue","addAllStatsValue","gain","add","PrestigeSkill","maxLevel","cost","numberOfPoints","totalPointCost","spendPoints","applySkill","AttackSpeedPrestigeSkill","addTemporaryModifier","ImprovedConsolidatingPrestigeSkill","improvedConsolidating","prestigeStatsGain","ImprovedConsolidatingTwoPrestigeSkill","improvedConsolidatingTwo","ImprovedLearningPrestigeSkill","improvedLearning","experienceGain","ImprovedTrainingPrestigeSkill","improvedTraining","statGain","MonkMasteryPrestigeSkill","monkMastery","unlockClass","PrestigiousPrestigeSkill","prestigious","UnlockDepravedDungeonPrestigeSkill","unlockedDepravedDungeon","UnlockFleshWarperPrestigeSkill","allPrestigeSkillsInitialized","Zone","requiredStats","zoneKeyStats","minExp","maxExp","statIncrementalMultiplier","rate","StrawberryValleyFieldsZone","strawberryValleyFields","BerryRidgeRangeZone","berryRidgeRange","OldStoneFarmZone","oldStoneFarm","QuietSandsZone","quietSands","SmallPawsAcresZone","smallPawsAcres","FirebranchNurseryZone","firebranchNursery","requiredStatsData","TheDepravedDungeonZone","theDepravedDungeon","TheDryBurrowsZone","theDryBurrows","MoonshadowOrchardZone","moonshadowOrchard","RattlesnakeFarmZone","rattlesnakeFarm","WestwoodGardensZone","westwoodGardens","allZonesInitialized","UNLOCK_UNLOCKABLES_LOOP_ID","unlockAllUnlockables","Object","values","forEach","playerClass","zone","unlockZone","unlockZones","unlockPrestigeSkill","unlockPrestigeSkills","ModifierManager","permanentModifiers","temporaryModifiers","loadModifiers","modifierType","temporarytModifiers","modifyStats","modifier","modifierGroup","alreadyHasModifier","findIndex","modifierItem","addModifierToModifierGroup","modifierMapData","key","modifierData","map","EXP_LEVEL_EXPONENT","BASE_EXP","ClassModifier","classId","statMultiplier","baseStats","multiplyAllStats","pow","floor","playerStats","numberOfLevelUps","addStats","getModifiedStats","numberOfLevelsToGrow","getNumberOfLevelsToGrow","levelUp","ZoneModifier","zoneId","removeRequirements","originalZone","modifiedMinExp","getModifiedMinExp","modifiedMaxExp","getModifiedMaxExp","modifiedStatMultiplier","length","keyStat","expMultiplier","maxMultiplierPerStat","playerStat","requiredStat","singleStatMultiplier","min","dividedBy","keys","Player","activeClassLimit","activeClasses","classModifiers","activeZone","discoveredZones","zoneModifiers","loadClassModifiers","loadZoneModifiers","zoneModifier","classModifier","indexOf","playerClassId","getZoneModifier","shift","expReward","getExperienceReward","modifiedExpReward","addExperience","checkForLevelUp","classModifiersData","classModifierData","zoneModifiersData","initialDiscoveredZones","initialPlayerStats","initialUnlockedClasses","initialPlayer","createPrestigeSkill","Prestige","points","pointsToGainOnNextPrestige","prestigeSkills","basePlayer","loadPrestigeSkills","find","prestigeSkillItem","createdPrestigeSkill","pointsToAdd","pointsToSpend","isPretigeAvailable","getStatMultiplierOnPrestige","gainedStats","subtractStatsValue","newPlayer","setPlayer","applyPrestigeSkills","GameState","fps","lastExecutionTime","loopSubscriptions","frameTime","executableLoopFunction","timeInterval","timeSinceLastExecution","ids","loopSubscription","executionTime","gameLoopData","executeLoopFunction","defaultGameState","GameContext","createContext","lastFrameTime","performance","now","GameLoopProgress","gameLoopId","useContext","percent","showInfo","toCapitalizedWords","empty","words","match","capitalize","join","word","charAt","toUpperCase","substring","bossIconMap","BossBattle","appState","nextBossId","lastBossDefeatedIndex","getNextBossId","createBossDisplay","bossBattle","bossIcon","direction","Title","size","icon","Text","toString","fightButtonDisabled","onClick","disabled","createPreFightDisplay","createBattleDisplay","ClassPicker","createChangeActiveClassHandler","makeClassActive","style","width","getName","dataSource","renderItem","item","Item","display","gutter","span","getExperienceRequiredToLevel","generateClassListItem","bordered","itemLayout","PRESTIGE_SKILL_ICON_MAP","color","PrestigeActivation","createPrestigeSkillClickHandler","increaseLevel","getRequiredLevel","activatePrestige","grid","GAME_SAVE_KEY","saveGame","window","localStorage","setItem","JSON","stringify","saveGameToLocalStorage","loadGameFromLocalStorage","gameData","getItem","parse","err","clearSavedGameFromLocalStorage","removeItem","SettingsPanel","location","reload","Typography","StatsViewer","activeZoneName","createActivityPanel","ZONE_LOOP_ID","addExperienceToActiveClasses","ZonePicker","createSetActiveZoneHandler","makeZoneActive","getRate","getActiveZone","getStats","generateZoneListItem","Header","Layout","Content","Sider","PageLayout","useState","mainContent","setMainContent","overflow","height","position","left","className","theme","mode","defaultSelectedKeys","marginLeft","padding","margin","textAlign","SAVE_GAME_LOOP_ID","saveGameLoopFunction","App","React","setLastFrameTime","callback","delay","savedCallback","useRef","useEffect","current","setInterval","clearInterval","useInterval","gameLoop","Provider","value","config","precision","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.614dc349.chunk.js","sourcesContent":["export enum AllModifiers {\n    experienceGain = \"experienceGain\",\n    prestigePointGain = \"prestigePointGain\",\n    statGain = \"statGain\",\n    prestigeStatsGain = \"prestigeStatsGain\",\n    attackSpeed = \"attackSpeed\",\n}","import { GameLoopData } from \"../../gameState\";\n\nexport const PLAYER_ATTACK_LOOP_ID = 'playerAttack';\nexport const BOSS_ATTACK_LOOP_ID = 'bossAttack';\n\nexport function playerAttackLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        battle.playerAttack();\n    }\n}\n\nexport function bossAttackLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        battle.bossAttack();\n    }\n}","import Battle from \"../../battle/battle\";\nimport GameState, { GameLoopData } from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport { BOSS_ATTACK_LOOP_ID, PLAYER_ATTACK_LOOP_ID } from \"./battleEntityAttack\";\n\nexport const BATTLE_OVER_LOOP_ID = 'battleOver';\n\nexport function battleOverLoopFunction(data: GameLoopData) {\n    const battle = data.gameState.battle;\n    if (battle) {\n        if (battle.player.isDefeated()) {\n            stopBattle(data.gameState);\n        } else if (battle.boss.isDefeated()) {\n            gainRewards(data.gameState, battle);\n            stopBattle(data.gameState);\n        }\n    }\n}\n\nfunction gainRewards(gameState: GameState, battle: Battle) {\n    const prestigePointGain = gameState.modifierManager.modifyDecimal(battle.boss.prestigePoints, AllModifiers.prestigePointGain);\n    gameState.prestige.addPoints(prestigePointGain);\n    gameState.player.lastBossDefeated = battle.boss.id;\n    gameState.history.addDefeatedBoss(battle.boss.id);\n}\n\nfunction stopBattle(gameState: GameState) {\n    gameState.removeSubscriptions([BATTLE_OVER_LOOP_ID, PLAYER_ATTACK_LOOP_ID, BOSS_ATTACK_LOOP_ID]);\n    gameState.battle = undefined;\n}","export enum AllBosses {\n    brute = \"brute\",\n    spectre = \"spectre\",\n    brain = \"brain\",\n}","export enum StatTypes {\n    strength = 'strength',\n    toughness = 'toughness',\n    wisdom = 'wisdom',\n    dexterity = 'dexterity',\n    charisma = 'charisma',\n    intelligence = 'intelligence'\n}","import Decimal from \"decimal.js\";\n\nexport interface BattleEntityData {\n    attackValue: Decimal | string,\n    defenseValue: Decimal | string,\n    bonusDamage?: Decimal | string,\n    attackInterval?: number\n}\n\nexport default class BattleEntity {\n    hp: Decimal;\n    attackValue: Decimal;\n    defenseValue: Decimal;\n    bonusDamage: Decimal;\n    attackInterval: number;\n\n    constructor(data: BattleEntityData) {\n        this.attackValue = new Decimal(data.attackValue);\n        this.defenseValue = new Decimal(data.defenseValue);\n        this.bonusDamage = data.bonusDamage ? new Decimal(data.bonusDamage) : new Decimal(1);\n        this.attackInterval = data.attackInterval ? data.attackInterval : 5;\n        this.hp = this.attackValue.plus(this.defenseValue).div(5);\n    }\n\n    attack(target: BattleEntity) {\n        target.hp = Decimal.max(target.hp.minus(Decimal.max(this.attackValue.minus(target.defenseValue), 0)), 0);\n    }\n\n    isDefeated() {\n        return this.hp.eq(0);\n    }\n}","import Player from \"../player/player\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport BattleEntity from \"./battleEntity\";\n\nexport interface BattlePlayerData {\n    player: Player,\n    attackStat: StatTypes,\n    defenseStat: StatTypes,\n}\n\nexport default class BattlePlayer extends BattleEntity {\n    constructor(data: BattlePlayerData) {\n        super({\n            attackValue: data.player.stats.get(data.attackStat),\n            defenseValue: data.player.stats.get(data.defenseStat),\n        });\n    }\n}","import Decimal from \"decimal.js\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport BattleEntity, { BattleEntityData } from \"./battleEntity\";\nimport { AllBosses } from \"./bosses/allBosses\";\n\nexport interface BossData extends BattleEntityData {\n    id: AllBosses,\n    name: string,\n    prestigePoints: Decimal | string,\n    playerAttackStat: StatTypes,\n    playerDefenseStat: StatTypes\n}\n\nexport default class Boss extends BattleEntity {\n    id: AllBosses;\n    name: string;\n    prestigePoints: Decimal;\n    playerAttackStat: StatTypes;\n    playerDefenseStat: StatTypes;\n\n    constructor(data: BossData) {\n        super(data);\n        this.prestigePoints = new Decimal(data.prestigePoints);\n        this.id = data.id;\n        this.name = data.name;\n        this.playerAttackStat = data.playerAttackStat;\n        this.playerDefenseStat = data.playerDefenseStat;\n    }\n}","import { StatTypes } from \"../../stats/statsEnum\";\nimport Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\n\n\nexport default class Brain extends Boss {\n    constructor() {\n        super({\n            id: AllBosses.brain,\n            name: AllBosses.brain,\n            prestigePoints: '100',\n            attackValue: '1000000',\n            defenseValue: '500000',\n            attackInterval: 4.5,\n            playerAttackStat: StatTypes.toughness,\n            playerDefenseStat: StatTypes.intelligence\n        });\n    }\n}","import { StatTypes } from \"../../stats/statsEnum\";\nimport Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\n\n\nexport default class Brute extends Boss {\n    constructor() {\n        super({\n            id: AllBosses.brute,\n            name: AllBosses.brute,\n            prestigePoints: '1',\n            attackValue: '2500',\n            defenseValue: '2500',\n            playerAttackStat: StatTypes.strength,\n            playerDefenseStat: StatTypes.toughness\n        });\n    }\n}","import { StatTypes } from \"../../stats/statsEnum\";\nimport Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\n\n\nexport default class Spectre extends Boss {\n    constructor() {\n        super({\n            id: AllBosses.spectre,\n            name: AllBosses.spectre,\n            prestigePoints: '10',\n            attackValue: '25000',\n            defenseValue: '25000',\n            playerAttackStat: StatTypes.wisdom,\n            playerDefenseStat: StatTypes.charisma\n        });\n    }\n}","import Boss from \"../boss\";\nimport { AllBosses } from \"./allBosses\";\nimport Brain from \"./brain\";\nimport Brute from \"./brute\";\nimport Spectre from \"./spectre\";\n\nexport default function initializeBoss(bossId: AllBosses): Boss {\n    switch (bossId) {\n        case AllBosses.brute:\n            return new Brute();\n        case AllBosses.spectre:\n            return new Spectre();\n        case AllBosses.brain:\n            return new Brain();\n        default:\n            throw new Error('Invalid bossId');\n    }\n}","import GameState from \"../gameState\";\nimport { bossAttackLoopFunction, BOSS_ATTACK_LOOP_ID, playerAttackLoopFunction, PLAYER_ATTACK_LOOP_ID } from \"../loopFunctions/battle/battleEntityAttack\";\nimport { battleOverLoopFunction, BATTLE_OVER_LOOP_ID } from \"../loopFunctions/battle/battleOver\";\nimport { AllModifiers } from \"../modifiers/allModifiers\";\nimport BattlePlayer from \"./battlePlayer\";\nimport Boss from \"./boss\";\nimport { AllBosses } from \"./bosses/allBosses\";\nimport initializeBoss from \"./bosses/initializeBoss\";\n\nexport interface BattleData {\n    bossId: AllBosses\n    gameState: GameState\n}\n\nexport default class Battle {\n    boss: Boss;\n    player: BattlePlayer;\n\n    constructor(data: BattleData) {\n        this.boss = initializeBoss(data.bossId);\n        this.player = new BattlePlayer({\n            player: data.gameState.player,\n            attackStat: this.boss.playerAttackStat,\n            defenseStat: this.boss.playerDefenseStat\n        });\n        const playerAttackInterval = data.gameState.modifierManager.modifyNumber(this.player.attackInterval, AllModifiers.attackSpeed);\n        console.log(playerAttackInterval);\n        data.gameState.addLoopSubscription(PLAYER_ATTACK_LOOP_ID, playerAttackLoopFunction, playerAttackInterval);\n        data.gameState.addLoopSubscription(BOSS_ATTACK_LOOP_ID, bossAttackLoopFunction, this.boss.attackInterval);\n        data.gameState.addLoopSubscription(BATTLE_OVER_LOOP_ID, battleOverLoopFunction);\n    }\n\n    playerAttack() {\n        this.player.attack(this.boss);\n    }\n\n    bossAttack() {\n        this.boss.attack(this.player);\n    }\n}","import GameState from \"../../gameState\";\nimport { AllBosses } from \"./allBosses\";\n\nconst bossFightOrder = [\n    AllBosses.brute,\n    AllBosses.spectre,\n    AllBosses.brain,\n];\n\nexport default function getNextBossId(gameState: GameState) {\n    if (!gameState.player.lastBossDefeated) {\n        return bossFightOrder[0];\n    } else {\n        const lastBossDefeatedIndex = bossFightOrder.indexOf(gameState.player.lastBossDefeated);\n        if (lastBossDefeatedIndex === -1) {\n            return null;\n        } else if (lastBossDefeatedIndex + 1 >= bossFightOrder.length) {\n            return null;\n        } else {\n            return bossFightOrder[lastBossDefeatedIndex + 1];\n        }\n    }\n};","export enum AllClasses {\n    bard = \"bard\",\n    warrior = \"warrior\",\n    healer = \"healer\",\n    defender = \"defender\",\n    mage = \"mage\",\n    rogue = \"rogue\",\n    archer = \"archer\",\n    fighter = \"fighter\",\n    soldier = \"soldier\",\n    wizard = \"wizard\",\n    cleric = \"cleric\",\n    dancer = \"dancer\",\n    monk = \"monk\",\n    slayer = \"slayer\",\n    enchanter = \"enchanter\",\n    necromancer = \"necromancer\",\n    shield = \"shield\",\n    shadowknight = \"shadowknight\",\n    empath = \"empath\",\n    priest = \"priest\",\n    fleshwarper = \"fleshwarper\",\n    assassin = \"assassin\",\n    /*\n    ninja = \"ninja\",\n    spellslinger = \"spellslinger\",\n    hunter = \"hunter\",\n    ranger = \"ranger\",\n    berserker = \"berserker\",\n    summoner = \"summoner\",\n    dragoon = \"dragoon\",\n    lancer = \"lancer\",\n    paladin = \"paladin\",\n    druid = \"druid\",\n    battlesinger = \"battlesinger\",\n    infiltrator = \"infiltrator\",\n    lich = \"lich\",\n    riddler = \"riddler\",\n    sapper = \"sapper\",\n    wordsmith = \"wordsmith\",\n    truthsayer = \"truthsayer\",\n    skald = \"skald\",\n    sniper = \"sniper\",\n    spy = \"spy\",\n    thief = \"thief\"\n    */\n}","import { AllBosses } from \"../battle/bosses/allBosses\"\n\nexport type BossesDefeated = {\n    [key in AllBosses]?: number\n}\n\nexport interface HistoryData {\n    bossesDefeated?: BossesDefeated\n}\n\nexport default class History {\n    bossesDefeated: BossesDefeated\n\n    constructor(data: HistoryData) {\n        this.bossesDefeated = data.bossesDefeated ? { ...data.bossesDefeated } : {};\n    }\n\n    addDefeatedBoss(bossId: AllBosses) {\n        const defeatedBossCount = this.bossesDefeated[bossId] || 0;\n        this.bossesDefeated[bossId] = defeatedBossCount + 1;\n    }\n\n    getBossDefeatedCount(bossId: AllBosses) {\n        return this.bossesDefeated[bossId] || 0\n    }\n}","import Decimal from \"decimal.js\";\nimport { StatTypes } from \"./statsEnum\";\n\nexport interface StatsData {\n    [StatTypes.strength]: string | Decimal;\n    [StatTypes.toughness]: string | Decimal;\n    [StatTypes.wisdom]: string | Decimal;\n    [StatTypes.dexterity]: string | Decimal;\n    [StatTypes.charisma]: string | Decimal;\n    [StatTypes.intelligence]: string | Decimal;\n}\n\nexport default class Stats {\n    [StatTypes.strength]: Decimal;\n    [StatTypes.toughness]: Decimal;\n    [StatTypes.wisdom]: Decimal;\n    [StatTypes.dexterity]: Decimal;\n    [StatTypes.charisma]: Decimal;\n    [StatTypes.intelligence]: Decimal;\n\n    constructor(data: StatsData) {\n        this.strength = new Decimal(data.strength);\n        this.toughness = new Decimal(data.toughness);\n        this.wisdom = new Decimal(data.wisdom);\n        this.dexterity = new Decimal(data.dexterity);\n        this.charisma = new Decimal(data.charisma);\n        this.intelligence = new Decimal(data.intelligence);\n    }\n\n    addStats(incrementalStats: Stats) {\n        this.strength = this.strength.plus(incrementalStats.strength);\n        this.toughness = this.toughness.plus(incrementalStats.toughness);\n        this.wisdom = this.wisdom.plus(incrementalStats.wisdom);\n        this.dexterity = this.dexterity.plus(incrementalStats.dexterity);\n        this.charisma = this.charisma.plus(incrementalStats.charisma);\n        this.intelligence = this.intelligence.plus(incrementalStats.intelligence);\n    }\n\n    subtractStatsValue(incrementalStats: Stats) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.minus(incrementalStats.strength),\n            [StatTypes.toughness]: this.toughness.minus(incrementalStats.toughness),\n            [StatTypes.wisdom]: this.wisdom.minus(incrementalStats.wisdom),\n            [StatTypes.dexterity]: this.dexterity.minus(incrementalStats.dexterity),\n            [StatTypes.charisma]: this.charisma.minus(incrementalStats.charisma),\n            [StatTypes.intelligence]: this.intelligence.minus(incrementalStats.intelligence),\n        });\n    }\n\n    multiplyAllStats(multiplier: Decimal | number) {\n        this.strength = this.strength.times(multiplier);\n        this.toughness = this.toughness.times(multiplier);\n        this.wisdom = this.wisdom.times(multiplier);\n        this.dexterity = this.dexterity.times(multiplier);\n        this.charisma = this.charisma.times(multiplier);\n        this.intelligence = this.intelligence.times(multiplier);\n        return this;\n    }\n\n    multiplyAllStatsValue(multiplier: Decimal | number) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.times(multiplier),\n            [StatTypes.toughness]: this.toughness.times(multiplier),\n            [StatTypes.wisdom]: this.wisdom.times(multiplier),\n            [StatTypes.dexterity]: this.dexterity.times(multiplier),\n            [StatTypes.charisma]: this.charisma.times(multiplier),\n            [StatTypes.intelligence]: this.intelligence.times(multiplier),\n        });\n    }\n\n    addAllStatsValue(additive: Decimal | number) {\n        return new Stats({\n            [StatTypes.strength]: this.strength.plus(additive),\n            [StatTypes.toughness]: this.toughness.plus(additive),\n            [StatTypes.wisdom]: this.wisdom.plus(additive),\n            [StatTypes.dexterity]: this.dexterity.plus(additive),\n            [StatTypes.charisma]: this.charisma.plus(additive),\n            [StatTypes.intelligence]: this.intelligence.plus(additive),\n        });\n    }\n\n    get(statName: StatTypes) {\n        return this[statName];\n    }\n\n    isGreaterThanOrEqualTo(stats: Stats) {\n        if (this[StatTypes.strength].lessThan(stats[StatTypes.strength])) {\n            return false;\n        }\n        if (this[StatTypes.toughness].lessThan(stats[StatTypes.toughness])) {\n            return false;\n        }\n        if (this[StatTypes.dexterity].lessThan(stats[StatTypes.dexterity])) {\n            return false;\n        }\n        if (this[StatTypes.wisdom].lessThan(stats[StatTypes.wisdom])) {\n            return false;\n        }\n        if (this[StatTypes.intelligence].lessThan(stats[StatTypes.intelligence])) {\n            return false;\n        }\n        if (this[StatTypes.charisma].lessThan(stats[StatTypes.charisma])) {\n            return false;\n        }\n        return true;\n    }\n}","export enum UnlockRequirementTypes {\n    classLevel = \"classLevel\",\n    playerLevel = \"playerLevel\",\n    statMinimums = \"statMinimums\",\n    bossDefeated = \"bossDefeated\",\n    prestigeCount = \"prestigeCount\",\n    prestigeSkill = \"prestigeSkill\",\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../battle/bosses/allBosses\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport GameState from \"../gameState\";\nimport { AllPrestigeSkills } from \"../prestige/allPrestigeSkills\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport interface UnlockRequirementData {\n    id: UnlockRequirementTypes\n    prestigeSkillId?: AllPrestigeSkills,\n    classType?: AllClasses,\n    requiredLevel?: Decimal | string\n    stats?: Stats | StatsData\n    bossId?: AllBosses,\n    minCount?: number,\n}\n\nexport interface InheritedUnlockRequirementData {\n    prestigeSkillId?: AllPrestigeSkills,\n    classType?: AllClasses,\n    requiredLevel?: Decimal | string\n    stats?: Stats | StatsData\n    bossId?: AllBosses,\n    minCount?: number,\n}\n\nexport default abstract class UnlockRequirement {\n    id: UnlockRequirementTypes;\n    prestigeSkillId?: AllPrestigeSkills;\n    classType?: AllClasses;\n    requiredLevel?: Decimal;\n    stats?: Stats;\n    bossId?: AllBosses;\n    minCount?: number;\n\n    constructor(data: UnlockRequirementData) {\n        this.id = data.id;\n    }\n\n    abstract requirementsMet(gameState: GameState): boolean\n}","import { AllBosses } from \"../battle/bosses/allBosses\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\nexport default class BossDefeatedRequirement extends UnlockRequirement {\n    bossId: AllBosses\n    minCount: number\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.bossDefeated\n        });\n        if (!data.bossId) {\n            throw new Error('bossId is required');\n        }\n\n        if (!data.minCount) {\n            throw new Error('minCount is required');\n        }\n\n        this.bossId = data.bossId;\n        this.minCount = data.minCount;\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.history.getBossDefeatedCount(this.bossId) >= this.minCount) {\n            return true;\n        }\n\n        return false;\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport default class ClassLevelRequirement extends UnlockRequirement {\n    classType: AllClasses;\n    requiredLevel: Decimal;\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.classLevel\n        });\n        if (!data.classType) {\n            throw new Error('classType is required');\n        }\n        if (!data.requiredLevel) {\n            throw new Error('requiredLevel is required');\n        }\n        this.classType = data.classType;\n        this.requiredLevel = new Decimal(data.requiredLevel);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.unlockedClasses.includes(this.classType)) {\n            const classModifier = gameState.player.getClassModifier(this.classType);\n            if (classModifier.level.greaterThanOrEqualTo(this.requiredLevel)) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n}","import Decimal from \"decimal.js\";\nimport gameState from \"../gameState\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\nexport default class PlayerLevelRequirement extends UnlockRequirement {\n    requiredLevel: Decimal;\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.playerLevel\n        });\n        if (!data.requiredLevel) {\n            throw new Error('requiredLevel is required');\n        }\n        this.requiredLevel = new Decimal(data.requiredLevel);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.getTotalLevel().greaterThanOrEqualTo(this.requiredLevel)) {\n            return true;\n        }\n\n        return false;\n    }\n\n}","import gameState from \"../gameState\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\nexport default class PrestigeCountRequirement extends UnlockRequirement {\n    minCount: number\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.prestigeCount\n        });\n\n        if (!data.minCount) {\n            throw new Error('minCount is required');\n        }\n\n        this.minCount = data.minCount;\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.prestige.count >= this.minCount) {\n            return true;\n        }\n\n        return false;\n    }\n}","import gameState from \"../gameState\";\nimport { AllPrestigeSkills } from \"../prestige/allPrestigeSkills\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport default class PrestigeSkillRequirement extends UnlockRequirement {\n    prestigeSkillId: AllPrestigeSkills;\n    minCount: number;\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.prestigeSkill\n        });\n        if (!data.prestigeSkillId) {\n            throw new Error('prestigeSkill is required');\n        }\n        this.prestigeSkillId = data.prestigeSkillId;\n        this.minCount = data.minCount ? data.minCount : 1;\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        const prestigeSkill = gameState.prestige.getPrestigeSkill(this.prestigeSkillId);\n        if (prestigeSkill && prestigeSkill.currentLevel >= this.minCount) {\n            return true;\n        }\n\n        return false;\n    }\n\n}","import gameState from \"../gameState\";\nimport Stats from \"../stats/stats\";\nimport UnlockRequirement, { InheritedUnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport default class StatMinimumsRequirement extends UnlockRequirement {\n    stats: Stats;\n\n    constructor(data: InheritedUnlockRequirementData) {\n        super({\n            id: UnlockRequirementTypes.statMinimums\n        });\n        if (!data.stats) {\n            throw new Error('stats are required');\n        }\n        this.stats = new Stats(data.stats);\n    }\n\n    requirementsMet(gameState: gameState): boolean {\n        if (gameState.player.stats.isGreaterThanOrEqualTo(this.stats)) {\n            return true;\n        }\n\n        return false;\n    }\n\n}","import BossDefeatedRequirement from \"./bossDefeatedRequirement\";\nimport ClassLevelRequirement from \"./classLevelRequirement\";\nimport PlayerLevelRequirement from \"./playerLevelRequirement\";\nimport PrestigeCountRequirement from \"./prestigeCountRequirement\";\nimport PrestigeSkillRequirement from \"./prestigeSkillRequirement\";\nimport StatMinimumsRequirement from \"./statMinimumsRequirement\";\nimport UnlockRequirement, { UnlockRequirementData } from \"./unlockRequirement\";\nimport { UnlockRequirementTypes } from \"./unlockRequirementTypes\";\n\nexport default function loadUnlockRequirements(data: Array<UnlockRequirement | UnlockRequirementData>): Array<UnlockRequirement> {\n    const output: Array<UnlockRequirement> = [];\n    for (const unlockRequirementData of data) {\n        switch (unlockRequirementData.id) {\n            case UnlockRequirementTypes.classLevel:\n                output.push(new ClassLevelRequirement(unlockRequirementData));\n                break;\n            case UnlockRequirementTypes.playerLevel:\n                output.push(new PlayerLevelRequirement(unlockRequirementData));\n                break;\n            case UnlockRequirementTypes.statMinimums:\n                output.push(new StatMinimumsRequirement(unlockRequirementData));\n                break;\n            case UnlockRequirementTypes.bossDefeated:\n                output.push(new BossDefeatedRequirement(unlockRequirementData));\n                break;\n            case UnlockRequirementTypes.prestigeCount:\n                output.push(new PrestigeCountRequirement(unlockRequirementData));\n                break;\n            case UnlockRequirementTypes.prestigeSkill:\n                output.push(new PrestigeSkillRequirement(unlockRequirementData));\n                break;\n            default:\n            //do nothing\n        }\n    }\n    return output;\n}","export enum AllPrestigeSkills {\n    \"improvedConsolidating\" = \"improvedConsolidating\",\n    \"improvedConsolidatingTwo\" = \"improvedConsolidatingTwo\",\n    \"improvedLearning\" = \"improvedLearning\",\n    \"improvedTraining\" = \"improvedTraining\",\n    \"monkMastery\" = \"monkMastery\",\n    \"unlockedDepravedDungeon\" = \"unlockedDepravedDungeon\",\n    \"prestigious\" = \"prestigious\",\n    \"unlockFleshWarper\" = \"unlockFleshWarper\",\n    \"attackSpeed\" = \"attackSpeed\",\n}","import Decimal from \"decimal.js\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllClasses } from \"./allClasses\";\n\n\nexport interface PlayerClassImplementationData {\n    experience: Decimal | string;\n}\nexport interface PlayerClassData {\n    id: AllClasses,\n    name: string;\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>;\n    level?: Decimal | string;\n    experience: Decimal | string;\n    levelUpStats: Stats | StatsData;\n}\n\nexport default class PlayerClass {\n    id: AllClasses;\n    name: string;\n    unlockRequirements: Array<UnlockRequirement>;\n    level: Decimal;\n    experience: Decimal;\n    levelUpStats: Stats;\n\n    constructor(data: PlayerClassData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.unlockRequirements = data.unlockRequirements ? loadUnlockRequirements(data.unlockRequirements) : [];\n        this.level = data.level ? new Decimal(data.level) : new Decimal(0);\n        this.experience = new Decimal(data.experience);\n        this.levelUpStats = new Stats(data.levelUpStats);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class BardPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.bard,\n            name: AllClasses.bard,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '3',\n                [StatTypes.charisma]: '5',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class DefenderPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.defender,\n            name: AllClasses.defender,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '3',\n                [StatTypes.toughness]: '5',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class HealerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.healer,\n            name: AllClasses.healer,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '3'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class MagePlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.mage,\n            name: AllClasses.mage,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '3',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '5'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class RoguePlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.rogue,\n            name: AllClasses.rogue,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '1',\n                [StatTypes.toughness]: '1',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\nexport default class WarriorPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.warrior,\n            name: AllClasses.warrior,\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '3',\n                [StatTypes.wisdom]: '1',\n                [StatTypes.dexterity]: '1',\n                [StatTypes.charisma]: '1',\n                [StatTypes.intelligence]: '1'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ArcherPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.archer,\n            name: AllClasses.archer,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '60',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '80',\n                        [StatTypes.charisma]: '40',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ClericPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.cleric,\n            name: AllClasses.cleric,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '10',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '80',\n                        [StatTypes.dexterity]: '40',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '60'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '2',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '10',\n                [StatTypes.dexterity]: '2',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '5'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class DancerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.dancer,\n            name: AllClasses.dancer,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '40',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '60',\n                        [StatTypes.charisma]: '80',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '3',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '10',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class FighterPlayerClass extends PlayerClass {\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.fighter,\n            name: AllClasses.fighter,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '80',\n                        [StatTypes.toughness]: '40',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '60',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '10',\n                [StatTypes.toughness]: '3',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.charisma]: '2',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class MonkPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.monk,\n            name: AllClasses.monk,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.bard,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.defender,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.healer,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.mage,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.rogue,\n                    requiredLevel: '40'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.warrior,\n                    requiredLevel: '40'\n                }),\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '7',\n                [StatTypes.toughness]: '7',\n                [StatTypes.wisdom]: '7',\n                [StatTypes.dexterity]: '7',\n                [StatTypes.charisma]: '7',\n                [StatTypes.intelligence]: '7'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class SoldierPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.soldier,\n            name: AllClasses.soldier,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '60',\n                        [StatTypes.toughness]: '80',\n                        [StatTypes.wisdom]: '10',\n                        [StatTypes.dexterity]: '40',\n                        [StatTypes.charisma]: '10',\n                        [StatTypes.intelligence]: '10'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '10',\n                [StatTypes.wisdom]: '2',\n                [StatTypes.dexterity]: '3',\n                [StatTypes.charisma]: '2',\n                [StatTypes.intelligence]: '2'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class WizardPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.wizard,\n            name: AllClasses.wizard,\n            unlockRequirements: [\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '10',\n                        [StatTypes.toughness]: '10',\n                        [StatTypes.wisdom]: '60',\n                        [StatTypes.dexterity]: '10',\n                        [StatTypes.charisma]: '40',\n                        [StatTypes.intelligence]: '80'\n                    })\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '2',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.dexterity]: '2',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '10'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class AssassinPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.assassin,\n            name: AllClasses.assassin,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.fighter,\n                    requiredLevel: '650'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.slayer,\n                    requiredLevel: '650'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.rogue,\n                    requiredLevel: '650'\n                }),\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '150000',\n                        [StatTypes.toughness]: '25000',\n                        [StatTypes.wisdom]: '50000',\n                        [StatTypes.dexterity]: '180000',\n                        [StatTypes.charisma]: '50000',\n                        [StatTypes.intelligence]: '50000'\n                    })\n                })\n            ],\n            // 96\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '36',\n                [StatTypes.toughness]: '10',\n                [StatTypes.wisdom]: '6',\n                [StatTypes.dexterity]: '40',\n                [StatTypes.charisma]: '4',\n                [StatTypes.intelligence]: '10'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class EmpathPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.empath,\n            name: AllClasses.empath,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 5\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.bard,\n                    requiredLevel: '500'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.dancer,\n                    requiredLevel: '500'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.enchanter,\n                    requiredLevel: '500'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.healer,\n                    requiredLevel: '600'\n                }),\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '25000',\n                        [StatTypes.toughness]: '25000',\n                        [StatTypes.wisdom]: '100000',\n                        [StatTypes.dexterity]: '25000',\n                        [StatTypes.charisma]: '80000',\n                        [StatTypes.intelligence]: '60000'\n                    })\n                })\n            ],\n            // 96\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '8',\n                [StatTypes.toughness]: '8',\n                [StatTypes.wisdom]: '30',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.charisma]: '20',\n                [StatTypes.intelligence]: '20'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllPrestigeSkills } from \"../../prestige/allPrestigeSkills\";\nimport Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport PrestigeSkillRequirement from \"../../unlockables/prestigeSkillRequirement\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class FleshWarperPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.fleshwarper,\n            name: AllClasses.fleshwarper,\n            unlockRequirements: [\n                new PrestigeSkillRequirement({\n                    prestigeSkillId: AllPrestigeSkills.unlockFleshWarper\n                }),\n                new StatMinimumsRequirement({\n                    stats: new Stats({\n                        [StatTypes.strength]: '250000',\n                        [StatTypes.toughness]: '250000',\n                        [StatTypes.wisdom]: '250000',\n                        [StatTypes.dexterity]: '250000',\n                        [StatTypes.charisma]: '250000',\n                        [StatTypes.intelligence]: '250000'\n                    })\n                })\n            ],\n            // 192\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '44',\n                [StatTypes.toughness]: '48',\n                [StatTypes.wisdom]: '20',\n                [StatTypes.dexterity]: '40',\n                [StatTypes.charisma]: '16',\n                [StatTypes.intelligence]: '24'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class PriestPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.priest,\n            name: AllClasses.priest,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.healer,\n                    requiredLevel: '800'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.cleric,\n                    requiredLevel: '800'\n                }),\n            ],\n            // 96\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '6',\n                [StatTypes.toughness]: '20',\n                [StatTypes.wisdom]: '50',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.charisma]: '10',\n                [StatTypes.intelligence]: '10'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport PlayerLevelRequirement from \"../../unlockables/playerLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class EnchanterPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.enchanter,\n            name: AllClasses.enchanter,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.dancer,\n                    requiredLevel: '80'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.wizard,\n                    requiredLevel: '80'\n                }),\n                new PlayerLevelRequirement({\n                    requiredLevel: '350'\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '2',\n                [StatTypes.toughness]: '2',\n                [StatTypes.wisdom]: '10',\n                [StatTypes.dexterity]: '8',\n                [StatTypes.charisma]: '12',\n                [StatTypes.intelligence]: '14'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport PrestigeCountRequirement from \"../../unlockables/prestigeCountRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class NecromancerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.necromancer,\n            name: AllClasses.necromancer,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.brute,\n                    minCount: 1\n                }),\n                new PrestigeCountRequirement({\n                    minCount: 30\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.cleric,\n                    requiredLevel: '100'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.bard,\n                    requiredLevel: '100'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.wizard,\n                    requiredLevel: '100'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.healer,\n                    requiredLevel: '100'\n                }),\n            ],\n            // 96\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '4',\n                [StatTypes.toughness]: '6',\n                [StatTypes.wisdom]: '32',\n                [StatTypes.dexterity]: '6',\n                [StatTypes.charisma]: '21',\n                [StatTypes.intelligence]: '27'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport PlayerLevelRequirement from \"../../unlockables/playerLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ShadowKnightPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.shadowknight,\n            name: AllClasses.shadowknight,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.mage,\n                    requiredLevel: '60'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.warrior,\n                    requiredLevel: '60'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.wizard,\n                    requiredLevel: '60'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.soldier,\n                    requiredLevel: '60'\n                }),\n                new PlayerLevelRequirement({\n                    requiredLevel: '500'\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '10',\n                [StatTypes.toughness]: '10',\n                [StatTypes.wisdom]: '6',\n                [StatTypes.dexterity]: '6',\n                [StatTypes.charisma]: '6',\n                [StatTypes.intelligence]: '10'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class ShieldPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.shield,\n            name: AllClasses.shield,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.defender,\n                    requiredLevel: '80'\n                }),\n                new ClassLevelRequirement({\n                    classType: AllClasses.soldier,\n                    requiredLevel: '80'\n                }),\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '3',\n                [StatTypes.toughness]: '33',\n                [StatTypes.wisdom]: '3',\n                [StatTypes.dexterity]: '3',\n                [StatTypes.charisma]: '3',\n                [StatTypes.intelligence]: '3'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport PlayerLevelRequirement from \"../../unlockables/playerLevelRequirement\";\nimport { AllClasses } from \"../allClasses\";\nimport PlayerClass, { PlayerClassImplementationData } from \"../class\";\n\nexport default class SlayerPlayerClass extends PlayerClass {\n\n    constructor(data: PlayerClassImplementationData) {\n        const updatedData = {\n            ...data,\n            id: AllClasses.slayer,\n            name: AllClasses.slayer,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.brute,\n                    minCount: 15\n                }),\n                new PlayerLevelRequirement({\n                    requiredLevel: '250'\n                })\n            ],\n            levelUpStats: new Stats({\n                [StatTypes.strength]: '16',\n                [StatTypes.toughness]: '4',\n                [StatTypes.wisdom]: '4',\n                [StatTypes.dexterity]: '16',\n                [StatTypes.charisma]: '4',\n                [StatTypes.intelligence]: '4'\n            })\n        }\n\n        super(updatedData);\n    }\n}","import { AllClasses } from \"./allClasses\";\nimport BardPlayerClass from \"./baseClasses/bardPlayerClass\";\nimport DefenderPlayerClass from \"./baseClasses/defenderPlayerClass\";\nimport HealerPlayerClass from \"./baseClasses/healerPlayerClass\";\nimport MagePlayerClass from \"./baseClasses/magePlayerClass\";\nimport RoguePlayerClass from \"./baseClasses/roguePlayerClass\";\nimport WarriorPlayerClass from \"./baseClasses/warriorPlayerClass\";\nimport ArcherPlayerClass from \"./tierOneClasses/archerPlayerClass\";\nimport ClericPlayerClass from \"./tierOneClasses/clericPlayerClass\";\nimport DancerPlayerClass from \"./tierOneClasses/dancerPlayerClass\";\nimport FighterPlayerClass from \"./tierOneClasses/fighterPlayerClass\";\nimport MonkPlayerClass from \"./tierOneClasses/monkPlayerClass\";\nimport SoldierPlayerClass from \"./tierOneClasses/soldierPlayerClass\";\nimport WizardPlayerClass from \"./tierOneClasses/wizardPlayerClass\";\nimport AssassinPlayerClass from \"./tierThreeClasses/assassinPlayerClass\";\nimport EmpathPlayerClass from \"./tierThreeClasses/empathPlayerClass\";\nimport FleshWarperPlayerClass from \"./tierThreeClasses/fleshWarperPlayerClass\";\nimport PriestPlayerClass from \"./tierThreeClasses/priestPlayerClass\";\nimport EnchanterPlayerClass from \"./tierTwoClasses/enchanterPlayerClass\";\nimport NecromancerPlayerClass from \"./tierTwoClasses/necromancerPlayerClass\";\nimport ShadowKnightPlayerClass from \"./tierTwoClasses/shadowKnightPlayerClass\";\nimport ShieldPlayerClass from \"./tierTwoClasses/shieldPlayerClass\";\nimport SlayerPlayerClass from \"./tierTwoClasses/slayerPlayerClass\";\n\nconst allClassesInitialized = {\n    [AllClasses.archer]: new ArcherPlayerClass({ experience: '0' }),\n    [AllClasses.bard]: new BardPlayerClass({ experience: '0' }),\n    [AllClasses.defender]: new DefenderPlayerClass({ experience: '0' }),\n    [AllClasses.healer]: new HealerPlayerClass({ experience: '0' }),\n    [AllClasses.mage]: new MagePlayerClass({ experience: '0' }),\n    [AllClasses.rogue]: new RoguePlayerClass({ experience: '0' }),\n    [AllClasses.warrior]: new WarriorPlayerClass({ experience: '0' }),\n    [AllClasses.cleric]: new ClericPlayerClass({ experience: '0' }),\n    [AllClasses.dancer]: new DancerPlayerClass({ experience: '0' }),\n    [AllClasses.fighter]: new FighterPlayerClass({ experience: '0' }),\n    [AllClasses.monk]: new MonkPlayerClass({ experience: '0' }),\n    [AllClasses.soldier]: new SoldierPlayerClass({ experience: '0' }),\n    [AllClasses.wizard]: new WizardPlayerClass({ experience: '0' }),\n    [AllClasses.slayer]: new SlayerPlayerClass({ experience: '0' }),\n    [AllClasses.necromancer]: new NecromancerPlayerClass({ experience: '0' }),\n    [AllClasses.enchanter]: new EnchanterPlayerClass({ experience: '0' }),\n    [AllClasses.shield]: new ShieldPlayerClass({ experience: '0' }),\n    [AllClasses.shadowknight]: new ShadowKnightPlayerClass({ experience: '0' }),\n    [AllClasses.assassin]: new AssassinPlayerClass({ experience: '0' }),\n    [AllClasses.empath]: new EmpathPlayerClass({ experience: '0' }),\n    [AllClasses.fleshwarper]: new FleshWarperPlayerClass({ experience: '0' }),\n    [AllClasses.priest]: new PriestPlayerClass({ experience: '0' }),\n}\n\nexport default allClassesInitialized;","import GameState from \"../gameState\";\nimport UnlockRequirement from \"./unlockRequirement\";\n\nexport default function meetsAllUnlockRequirements(gameState: GameState, unlockRequirements: Array<UnlockRequirement>): boolean {\n    for (const unlockRequirement of unlockRequirements) {\n        if (!unlockRequirement.requirementsMet(gameState)) {\n            return false;\n        }\n    }\n\n    return true;\n}","export enum AllZones {\n    strawberryValleyFields = \"strawberryValleyFields\",\n    smallPawsAcres = \"smallPawsAcres\",\n    berryRidgeRange = \"berryRidgeRange\",\n    oldStoneFarm = \"oldStoneFarm\",\n    quietSands = \"quietSands\",\n    westwoodGardens = \"westwoodGardens\",\n    moonshadowOrchard = \"moonshadowOrchard\",\n    rattlesnakeFarm = \"rattlesnakeFarm\",\n    firebranchNursery = \"firebranchNursery\",\n    theDryBurrows = \"theDryBurrows\",\n    theDepravedDungeon = \"theDepravedDungeon\",\n    /*\n    littleRange = \"littleRange\",\n    rattlesnakeFarm = \"rattlesnakeFarm\",\n    silverbellGardens = \"silverbellGardens\",\n    firebranchNursery = \"firebranchNursery\",\n    theDryBurrows = \"theDryBurrows\",\n    theDepravedDungeon = \"theDepravedDungeon\",\n    theBloodfallLabyrinth = \"theBloodfallLabyrinth\",\n    theFalseTombs = \"theFalseTombs\",\n    theBrilliantPits = \"theBrilliantPits\",\n    theWhiteCells = \"theWhiteCells\",\n    theAbysmalVault = \"theAbysmalVault\",\n    theArticQuarters = \"theArticQuarters\",\n    theFabledLair = \"theFabledLair\",\n    vaultOfTheMadWolf = \"vaultOfTheMadWolf\",\n    redwind = \"redwind\",\n    dewport = \"dewport\",\n    southbarrow = \"southbarrow\",\n    highvein = \"highvein\",\n    starguard = \"starguard\",\n    pearlgate = \"pearlgate\",\n    stillkeep = \"stillkeep\",\n    ebonfair = \"ebonfair\",\n    stormstar = \"stormstar\",\n    ragetide = \"ragetide\",\n    bellpoint = \"bellpoint\",\n    sandshire = \"sandshire\",\n    theSinisterArena = \"theSinisterArena\",\n    theFuryStadium = \"theFuryStadium\",\n    theSanguineArena = \"theSanguineArena\",\n    theAcidArena = \"theAcidArena\",\n    wonderingSeafront = \"wonderingSeafront\",\n    minidownStrand = \"minidownStrand\",\n    delfilBay = \"delfilBay\",\n    barringwinBeach = \"barringwinBeach\",\n    malarshallPoint = \"malarshallPoint\",\n    blainlandBank = \"blainlandBank\",\n    darkShore = \"darkShore\",\n    ablomarrySchoolOfSorcery = \"ablomarrySchoolOfSorcery\",\n    bexrithsAcademyOfSpells = \"bexrithsAcademyOfSpells\",\n    trokwerthAcademyOfSorcery = \"trokwerthAcademyOfSorcery\",\n    clausinnsAcademyOfMagics = \"clausinnsAcademyOfMagics\"\n    */\n}","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { AllModifiers } from \"./allModifiers\";\n\nexport type Gains = Stats | Decimal | number\n\nexport interface ModifierData {\n    id: string\n    group: AllModifiers\n    additiveValue?: Decimal | string\n    multiplicativeValue?: Decimal | string\n}\n\nexport default class Modifier {\n    id: string\n    group: AllModifiers\n    additiveValue: Decimal\n    multiplicativeValue: Decimal\n\n    constructor(data: ModifierData) {\n        this.id = data.id;\n        this.group = data.group;\n        this.additiveValue = data.additiveValue ? new Decimal(data.additiveValue) : new Decimal(0);\n        this.multiplicativeValue = data.multiplicativeValue ? new Decimal(data.multiplicativeValue) : new Decimal(1);\n    }\n\n    modifyStats(gains: Stats) {\n        return this.addToStatGains(this.multiplyStatGains(gains));\n    }\n\n    modifyDecimal(gains: Decimal) {\n        return this.addToGain(this.multiplyGain(gains));\n    }\n\n    modifyNumber(gains: number) {\n        return this.addToGain(this.multiplyGain(gains)).toNumber();\n    }\n\n    multiplyStatGains(statGains: Stats) {\n        return statGains.multiplyAllStatsValue(this.multiplicativeValue);\n    }\n\n    addToStatGains(statGains: Stats) {\n        return statGains.addAllStatsValue(this.additiveValue);\n    }\n\n    multiplyGain(gain: Decimal | number) {\n        return this.multiplicativeValue.times(gain);\n    }\n\n    addToGain(gain: Decimal | number) {\n        return this.additiveValue.add(gain);\n    }\n}","import { AllBosses } from \"../battle/bosses/allBosses\";\nimport GameState from \"../gameState\";\nimport BossDefeatedRequirement from \"../unlockables/bossDefeatedRequirement\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllPrestigeSkills } from \"./allPrestigeSkills\";\n\nexport interface PrestigeSkillData {\n    id: AllPrestigeSkills\n    name: string\n    maxLevel: number\n    currentLevel?: number\n    cost?: number\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>\n}\n\nexport interface InheritedPrestigeSkillData {\n    currentLevel?: number\n}\n\nexport default abstract class PrestigeSkill {\n    id: AllPrestigeSkills\n    name: string\n    maxLevel: number\n    currentLevel: number\n    cost: number\n    unlockRequirements: Array<UnlockRequirement>\n\n    constructor(data: PrestigeSkillData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.maxLevel = data.maxLevel;\n        this.currentLevel = data.currentLevel ? data.currentLevel : 0;\n        this.cost = data.cost ? data.cost : 1;\n        this.unlockRequirements = data.unlockRequirements ? loadUnlockRequirements(data.unlockRequirements) : [\n            new BossDefeatedRequirement({\n                bossId: AllBosses.brute,\n                minCount: 1\n            })\n        ]\n    }\n\n    increaseLevel(gameState: GameState, numberOfPoints = 1) {\n        if (this.currentLevel + numberOfPoints <= this.maxLevel) {\n            const totalPointCost = this.cost * numberOfPoints;\n            if (gameState.prestige.spendPoints(totalPointCost)) {\n                this.currentLevel = this.currentLevel + numberOfPoints;\n                this.applySkill(gameState);\n            }\n        }\n    }\n\n    abstract applySkill(gameState: GameState): void\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../../battle/bosses/allBosses\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class AttackSpeedPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.attackSpeed,\n            name: AllPrestigeSkills.attackSpeed,\n            maxLevel: 10,\n            cost: 30,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 3\n                })\n            ],\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.attackSpeed,\n                group: AllModifiers.attackSpeed,\n                additiveValue: new Decimal((-.1 * this.currentLevel))\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedConsolidatingPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedConsolidating,\n            name: AllPrestigeSkills.improvedConsolidating,\n            maxLevel: 1,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedConsolidating,\n                group: AllModifiers.prestigeStatsGain,\n                additiveValue: new Decimal(.18 * this.currentLevel)\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../../battle/bosses/allBosses\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedConsolidatingTwoPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedConsolidatingTwo,\n            name: AllPrestigeSkills.improvedConsolidatingTwo,\n            maxLevel: 5,\n            cost: 20,\n            currentLevel: data.currentLevel,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 1\n                })\n            ]\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedConsolidatingTwo,\n                group: AllModifiers.prestigeStatsGain,\n                additiveValue: new Decimal(.01 * this.currentLevel)\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedLearningPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedLearning,\n            name: AllPrestigeSkills.improvedLearning,\n            maxLevel: 10,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedLearning,\n                group: AllModifiers.experienceGain,\n                multiplicativeValue: new Decimal(1 + (this.currentLevel * .1))\n            })\n        )\n    }\n}","import Decimal from \"decimal.js\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class ImprovedTrainingPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.improvedTraining,\n            name: AllPrestigeSkills.improvedTraining,\n            maxLevel: 10,\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.improvedTraining,\n                group: AllModifiers.statGain,\n                multiplicativeValue: new Decimal(1 + (this.currentLevel * .1))\n            })\n        )\n    }\n}","import { AllClasses } from \"../../classes/allClasses\";\nimport GameState from \"../../gameState\";\nimport ClassLevelRequirement from \"../../unlockables/classLevelRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class MonkMasteryPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.monkMastery,\n            name: AllPrestigeSkills.monkMastery,\n            maxLevel: 1,\n            cost: 10,\n            currentLevel: data.currentLevel,\n            unlockRequirements: [\n                new ClassLevelRequirement({\n                    classType: AllClasses.monk,\n                    requiredLevel: '250'\n                })\n            ]\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        if (this.currentLevel === this.maxLevel) {\n            console.log('unlocking monk');\n            gameState.player.unlockClass(AllClasses.monk);\n        }\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../../battle/bosses/allBosses\";\nimport GameState from \"../../gameState\";\nimport { AllModifiers } from \"../../modifiers/allModifiers\";\nimport Modifier from \"../../modifiers/modifier\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class PrestigiousPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.prestigious,\n            name: AllPrestigeSkills.prestigious,\n            maxLevel: 50,\n            cost: 5,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 1\n                })\n            ],\n            currentLevel: data.currentLevel\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        gameState.modifierManager.addTemporaryModifier(\n            new Modifier({\n                id: AllPrestigeSkills.prestigious,\n                group: AllModifiers.prestigePointGain,\n                multiplicativeValue: new Decimal(1 + (.01 * this.currentLevel))\n            })\n        )\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport GameState from \"../../gameState\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class UnlockDepravedDungeonPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.unlockedDepravedDungeon,\n            name: AllPrestigeSkills.unlockedDepravedDungeon,\n            maxLevel: 1,\n            cost: 200,\n            currentLevel: data.currentLevel,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 1\n                })\n            ]\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        // do nothing\n    }\n}","import { AllBosses } from \"../../battle/bosses/allBosses\";\nimport GameState from \"../../gameState\";\nimport BossDefeatedRequirement from \"../../unlockables/bossDefeatedRequirement\";\nimport { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport PrestigeSkill, { InheritedPrestigeSkillData } from \"../prestigeSkill\";\n\nexport default class UnlockFleshWarperPrestigeSkill extends PrestigeSkill {\n    constructor(data: InheritedPrestigeSkillData) {\n        super({\n            id: AllPrestigeSkills.unlockFleshWarper,\n            name: AllPrestigeSkills.unlockFleshWarper,\n            maxLevel: 1,\n            cost: 150,\n            currentLevel: data.currentLevel,\n            unlockRequirements: [\n                new BossDefeatedRequirement({\n                    bossId: AllBosses.spectre,\n                    minCount: 25\n                })\n            ]\n        });\n    }\n\n    applySkill(gameState: GameState) {\n        // do nothing\n    }\n}","import { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport AttackSpeedPrestigeSkill from \"./attackSpeedPrestigeSkill\";\nimport ImprovedConsolidatingPrestigeSkill from \"./improvedConsolidating\";\nimport ImprovedConsolidatingTwoPrestigeSkill from \"./improvedConsolidatingTwo\";\nimport ImprovedLearningPrestigeSkill from \"./improvedLearning\";\nimport ImprovedTrainingPrestigeSkill from \"./improvedTraining\";\nimport MonkMasteryPrestigeSkill from \"./monkMastery\";\nimport PrestigiousPrestigeSkill from \"./prestigious\";\nimport UnlockDepravedDungeonPrestigeSkill from \"./unlockDepravedDungeon\";\nimport UnlockFleshWarperPrestigeSkill from \"./unlockFleshWarperPrestigeSkill\";\n\nconst allPrestigeSkillsInitialized = {\n    [AllPrestigeSkills.improvedConsolidating]: new ImprovedConsolidatingPrestigeSkill({}),\n    [AllPrestigeSkills.improvedLearning]: new ImprovedLearningPrestigeSkill({}),\n    [AllPrestigeSkills.improvedTraining]: new ImprovedTrainingPrestigeSkill({}),\n    [AllPrestigeSkills.monkMastery]: new MonkMasteryPrestigeSkill({}),\n    [AllPrestigeSkills.unlockedDepravedDungeon]: new UnlockDepravedDungeonPrestigeSkill({}),\n    [AllPrestigeSkills.prestigious]: new PrestigiousPrestigeSkill({}),\n    [AllPrestigeSkills.unlockFleshWarper]: new UnlockFleshWarperPrestigeSkill({}),\n    [AllPrestigeSkills.attackSpeed]: new AttackSpeedPrestigeSkill({}),\n    [AllPrestigeSkills.improvedConsolidatingTwo]: new ImprovedConsolidatingTwoPrestigeSkill({}),\n}\n\nexport default allPrestigeSkillsInitialized;","import Decimal from \"decimal.js\";\nimport ZoneModifier from \"../player/zoneModifier\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport loadUnlockRequirements from \"../unlockables/loadUnlockRequirements\";\nimport StatMinimumsRequirement from \"../unlockables/statMinimumsRequirement\";\nimport UnlockRequirement, { UnlockRequirementData } from \"../unlockables/unlockRequirement\";\nimport { AllZones } from \"./allZones\";\n\nexport type ZoneKeyStats = Array<StatTypes>;\n\nexport interface ZoneData {\n    id: AllZones;\n    name: string;\n    unlockRequirements?: Array<UnlockRequirement | UnlockRequirementData>;\n    requiredStats: Stats | StatsData;\n    zoneKeyStats: ZoneKeyStats;\n    minExp: Decimal | string;\n    maxExp: Decimal | string;\n    statIncrementalMultiplier: Decimal | string;\n    rate: number;\n}\n\nexport default class Zone {\n    id: AllZones;\n    name: string;\n    unlockRequirements: Array<UnlockRequirement>;\n    requiredStats: Stats;\n    zoneKeyStats: ZoneKeyStats;\n    minExp: Decimal;\n    maxExp: Decimal;\n    statIncrementalMultiplier: Decimal;\n    rate: number;\n\n    constructor(data: ZoneData) {\n        this.id = data.id;\n        this.name = data.name;\n        this.requiredStats = new Stats(data.requiredStats);\n        if (!data.unlockRequirements) {\n            this.unlockRequirements = [new StatMinimumsRequirement({ stats: this.requiredStats })];\n        } else {\n            this.unlockRequirements = loadUnlockRequirements(data.unlockRequirements);\n        }\n        this.minExp = new Decimal(data.minExp);\n        this.maxExp = new Decimal(data.maxExp);\n        this.statIncrementalMultiplier = new Decimal(data.statIncrementalMultiplier);\n        this.zoneKeyStats = data.zoneKeyStats;\n        this.rate = data.rate;\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\nexport default class StrawberryValleyFieldsZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.strawberryValleyFields,\n            name: AllZones.strawberryValleyFields,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '5',\n                [StatTypes.toughness]: '5',\n                [StatTypes.dexterity]: '5',\n                [StatTypes.intelligence]: '5',\n                [StatTypes.wisdom]: '5',\n                [StatTypes.charisma]: '5',\n            }),\n            zoneKeyStats: [],\n            minExp: '1',\n            maxExp: '5',\n            statIncrementalMultiplier: '2',\n            rate: 5\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class BerryRidgeRangeZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.berryRidgeRange,\n            name: AllZones.berryRidgeRange,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '250',\n                [StatTypes.toughness]: '250',\n                [StatTypes.dexterity]: '250',\n                [StatTypes.intelligence]: '250',\n                [StatTypes.wisdom]: '250',\n                [StatTypes.charisma]: '250',\n            }),\n            zoneKeyStats: [],\n            minExp: '25',\n            maxExp: '250',\n            statIncrementalMultiplier: '2',\n            rate: 5\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class OldStoneFarmZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.oldStoneFarm,\n            name: AllZones.oldStoneFarm,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '40',\n                [StatTypes.toughness]: '60',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.intelligence]: '10',\n                [StatTypes.wisdom]: '10',\n                [StatTypes.charisma]: '30',\n            }),\n            zoneKeyStats: [StatTypes.toughness, StatTypes.strength, StatTypes.charisma],\n            minExp: '10',\n            maxExp: '80',\n            statIncrementalMultiplier: '2',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class QuietSandsZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.quietSands,\n            name: AllZones.quietSands,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '10',\n                [StatTypes.toughness]: '50',\n                [StatTypes.dexterity]: '10',\n                [StatTypes.intelligence]: '10',\n                [StatTypes.wisdom]: '35',\n                [StatTypes.charisma]: '10',\n            }),\n            zoneKeyStats: [StatTypes.toughness, StatTypes.wisdom],\n            minExp: '12',\n            maxExp: '48',\n            statIncrementalMultiplier: '2',\n            rate: 3\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class SmallPawsAcresZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.smallPawsAcres,\n            name: AllZones.smallPawsAcres,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '25',\n                [StatTypes.toughness]: '25',\n                [StatTypes.dexterity]: '25',\n                [StatTypes.intelligence]: '25',\n                [StatTypes.wisdom]: '25',\n                [StatTypes.charisma]: '25',\n            }),\n            zoneKeyStats: [],\n            minExp: '5',\n            maxExp: '120',\n            statIncrementalMultiplier: '3',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class FirebranchNurseryZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.firebranchNursery,\n            name: AllZones.firebranchNursery,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '20000',\n                [StatTypes.toughness]: '40000',\n                [StatTypes.dexterity]: '20000',\n                [StatTypes.intelligence]: '20000',\n                [StatTypes.wisdom]: '20000',\n                [StatTypes.charisma]: '20000',\n            }),\n            zoneKeyStats: [StatTypes.toughness],\n            minExp: '2000',\n            maxExp: '3600',\n            statIncrementalMultiplier: '.8',\n            rate: 3\n        }\n        super(updatedData);\n    }\n}","import { AllPrestigeSkills } from \"../../prestige/allPrestigeSkills\";\nimport Stats, { StatsData } from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport PrestigeSkillRequirement from \"../../unlockables/prestigeSkillRequirement\";\nimport StatMinimumsRequirement from \"../../unlockables/statMinimumsRequirement\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nconst requiredStatsData: StatsData = {\n    [StatTypes.strength]: '25000',\n    [StatTypes.toughness]: '15000',\n    [StatTypes.dexterity]: '15000',\n    [StatTypes.intelligence]: '15000',\n    [StatTypes.wisdom]: '25000',\n    [StatTypes.charisma]: '25000',\n}\n\nexport default class TheDepravedDungeonZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.theDepravedDungeon,\n            name: AllZones.theDepravedDungeon,\n            requiredStats: new Stats(requiredStatsData),\n            unlockRequirements: [\n                new StatMinimumsRequirement({ stats: new Stats(requiredStatsData) }),\n                new PrestigeSkillRequirement({\n                    prestigeSkillId: AllPrestigeSkills.unlockedDepravedDungeon\n                })\n            ],\n            zoneKeyStats: [StatTypes.strength, StatTypes.strength, StatTypes.wisdom, StatTypes.charisma],\n            minExp: '5000',\n            maxExp: '30000',\n            statIncrementalMultiplier: '1',\n            rate: 2\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class TheDryBurrowsZone extends Zone {\n\n    constructor() {\n\n        const updatedData = {\n            id: AllZones.theDryBurrows,\n            name: AllZones.theDryBurrows,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '56000',\n                [StatTypes.toughness]: '72000',\n                [StatTypes.dexterity]: '100000',\n                [StatTypes.intelligence]: '56000',\n                [StatTypes.wisdom]: '100000',\n                [StatTypes.charisma]: '56000',\n            }),\n            zoneKeyStats: [StatTypes.dexterity, StatTypes.wisdom, StatTypes.toughness],\n            minExp: '3000',\n            maxExp: '10000',\n            statIncrementalMultiplier: '.75',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class MoonshadowOrchardZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.moonshadowOrchard,\n            name: AllZones.moonshadowOrchard,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '4000',\n                [StatTypes.toughness]: '4000',\n                [StatTypes.dexterity]: '8000',\n                [StatTypes.intelligence]: '4000',\n                [StatTypes.wisdom]: '8000',\n                [StatTypes.charisma]: '4000',\n            }),\n            zoneKeyStats: [StatTypes.dexterity, StatTypes.wisdom],\n            minExp: '300',\n            maxExp: '1200',\n            statIncrementalMultiplier: '1.5',\n            rate: 3.5\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class RattlesnakeFarmZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.rattlesnakeFarm,\n            name: AllZones.rattlesnakeFarm,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '12000',\n                [StatTypes.toughness]: '8000',\n                [StatTypes.dexterity]: '2000',\n                [StatTypes.intelligence]: '12000',\n                [StatTypes.wisdom]: '2000',\n                [StatTypes.charisma]: '8000',\n            }),\n            zoneKeyStats: [StatTypes.strength, StatTypes.intelligence, StatTypes.toughness, StatTypes.charisma],\n            minExp: '1800',\n            maxExp: '4000',\n            statIncrementalMultiplier: '1',\n            rate: 6\n        }\n        super(updatedData);\n    }\n}","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\nimport { AllZones } from \"../allZones\";\nimport Zone from \"../zone\";\n\nexport default class WestwoodGardensZone extends Zone {\n\n    constructor() {\n        const updatedData = {\n            id: AllZones.westwoodGardens,\n            name: AllZones.westwoodGardens,\n            requiredStats: new Stats({\n                [StatTypes.strength]: '2500',\n                [StatTypes.toughness]: '2500',\n                [StatTypes.dexterity]: '2500',\n                [StatTypes.intelligence]: '2500',\n                [StatTypes.wisdom]: '2500',\n                [StatTypes.charisma]: '5000',\n            }),\n            zoneKeyStats: [StatTypes.charisma],\n            minExp: '250',\n            maxExp: '500',\n            statIncrementalMultiplier: '.8',\n            rate: 4\n        }\n        super(updatedData);\n    }\n}","import { AllZones } from \"./allZones\";\nimport StrawberryValleyFieldsZone from \"./baseZones/strawberryValleyFieldsZone\";\nimport BerryRidgeRangeZone from \"./tierOneZones/berryRidgeRangeZone\";\nimport OldStoneFarmZone from \"./tierOneZones/oldStoneFarmZone\";\nimport QuietSandsZone from \"./tierOneZones/quietSandsZone\";\nimport SmallPawsAcresZone from \"./tierOneZones/smallPawsAcresZone\";\nimport FirebranchNurseryZone from \"./tierThreeZones/firebranchNurseryZone\";\nimport TheDepravedDungeonZone from \"./tierThreeZones/theDepravedDungeonZone\";\nimport TheDryBurrowsZone from \"./tierThreeZones/theDryBurrowsZone\";\nimport MoonshadowOrchardZone from \"./tierTwoZones/moonshadowOrchardZone\";\nimport RattlesnakeFarmZone from \"./tierTwoZones/rattlesnakeFarmZone\";\nimport WestwoodGardensZone from \"./tierTwoZones/westwoodGardensZone\";\n\nconst allZonesInitialized = {\n    [AllZones.strawberryValleyFields]: new StrawberryValleyFieldsZone(),\n    [AllZones.berryRidgeRange]: new BerryRidgeRangeZone(),\n    [AllZones.oldStoneFarm]: new OldStoneFarmZone(),\n    [AllZones.quietSands]: new QuietSandsZone(),\n    [AllZones.smallPawsAcres]: new SmallPawsAcresZone(),\n    [AllZones.westwoodGardens]: new WestwoodGardensZone(),\n    [AllZones.moonshadowOrchard]: new MoonshadowOrchardZone(),\n    [AllZones.rattlesnakeFarm]: new RattlesnakeFarmZone(),\n    [AllZones.firebranchNursery]: new FirebranchNurseryZone(),\n    [AllZones.theDryBurrows]: new TheDryBurrowsZone(),\n    [AllZones.theDepravedDungeon]: new TheDepravedDungeonZone(),\n}\n\nexport default allZonesInitialized;","import { GameLoopData } from \"../../gameState\";\nimport unlockClasses from \"./unlockClasses\";\nimport unlockPrestigeSkills from \"./unlockPrestigeSkills\";\nimport unlockZones from \"./unlockZones\";\n\nexport const UNLOCK_UNLOCKABLES_LOOP_ID = \"unlockUnlockables\";\n\nexport default function unlockAllUnlockables(data: GameLoopData) {\n    unlockClasses(data.gameState);\n    unlockZones(data.gameState);\n    unlockPrestigeSkills(data.gameState);\n}","import allClassesInitialized from \"../../classes/allClassesInitialized\";\nimport GameState from \"../../gameState\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\n\nexport default function unlockClasses(gameState: GameState) {\n    Object.values(allClassesInitialized).forEach(playerClass => {\n        if (meetsAllUnlockRequirements(gameState, playerClass.unlockRequirements)) {\n            gameState.player.unlockClass(playerClass.id);\n        }\n    });\n}","import GameState from \"../../gameState\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\nimport allZonesInitialized from \"../../zones/allZonesInitialized\";\n\nexport default function unlockZones(gameState: GameState) {\n    Object.values(allZonesInitialized).forEach(zone => {\n        if (meetsAllUnlockRequirements(gameState, zone.unlockRequirements)) {\n            gameState.player.unlockZone(zone.id);\n        }\n    });\n}","import GameState from \"../../gameState\";\nimport allPrestigeSkillsInitialized from \"../../prestige/prestigeSkills/allPrestigeSkillsInitialized\";\nimport meetsAllUnlockRequirements from \"../../unlockables/meetsAllUnlockRequirements\";\n\nexport default function unlockPrestigeSkills(gameState: GameState) {\n    Object.values(allPrestigeSkillsInitialized).forEach(prestigeSkill => {\n        if (meetsAllUnlockRequirements(gameState, prestigeSkill.unlockRequirements)) {\n            gameState.prestige.unlockPrestigeSkill(prestigeSkill);\n        }\n    });\n}","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { AllModifiers } from \"./allModifiers\";\nimport Modifier, { Gains, ModifierData } from \"./modifier\";\n\nexport type ModifierMapData = {\n    [key in AllModifiers]?: Array<Modifier | ModifierData>\n}\n\nexport type ModifierMap = {\n    [key in AllModifiers]?: Array<Modifier>\n}\n\nexport interface ModifierManagerData {\n    permanentModifiers?: ModifierMapData\n}\n\nexport default class ModifierManager {\n    permanentModifiers: ModifierMap\n    temporaryModifiers: ModifierMap\n\n    constructor(data: ModifierManagerData) {\n        this.permanentModifiers = this.loadModifiers(data.permanentModifiers);\n        this.temporaryModifiers = {};\n    }\n\n    modifyStats(gains: Stats, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyStats(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyStats(output);\n            }\n        }\n\n        return output;\n    }\n\n    modifyDecimal(gains: Decimal, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyDecimal(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyDecimal(output);\n            }\n        }\n\n        return output;\n    }\n\n    modifyNumber(gains: number, modifierType: AllModifiers) {\n        let output = gains;\n        const permanentModifiers = this.permanentModifiers[modifierType];\n        const temporarytModifiers = this.temporaryModifiers[modifierType];\n\n        if (permanentModifiers) {\n            for (const modifier of permanentModifiers) {\n                output = modifier.modifyNumber(output);\n            }\n        }\n\n        if (temporarytModifiers) {\n            for (const modifier of temporarytModifiers) {\n                output = modifier.modifyNumber(output);\n            }\n        }\n\n        return output;\n    }\n\n    private addModifierToModifierGroup(modifier: Modifier, modifierGroup: Array<Modifier>) {\n        const alreadyHasModifier = modifierGroup.findIndex(modifierItem => {\n            if (modifier.id === modifierItem.id) {\n                return true;\n            }\n\n            return false;\n        });\n\n        if (alreadyHasModifier >= 0) {\n            modifierGroup[alreadyHasModifier] = modifier;\n        } else {\n            modifierGroup.push(modifier);\n        }\n    }\n\n    addTemporaryModifier(modifier: Modifier) {\n        const modifierGroup = this.temporaryModifiers[modifier.group];\n\n        if (!modifierGroup) {\n            this.temporaryModifiers[modifier.group] = [modifier]\n        } else {\n            this.addModifierToModifierGroup(modifier, modifierGroup);\n        }\n    }\n\n    addPermanentModifier(modifier: Modifier) {\n        const modifierGroup = this.permanentModifiers[modifier.group];\n\n        if (!modifierGroup) {\n            this.permanentModifiers[modifier.group] = [modifier]\n        } else {\n            this.addModifierToModifierGroup(modifier, modifierGroup);\n        }\n    }\n\n    loadModifiers(modifierMapData?: ModifierMapData): ModifierMap {\n        const output: ModifierMap = {};\n        let key: keyof typeof AllModifiers;\n\n        if (!modifierMapData) {\n            return output;\n        }\n\n        for (key in modifierMapData) {\n            const modifierData = modifierMapData[key];\n            if (modifierData) {\n                output[key] = modifierData.map(data => {\n                    return new Modifier(data);\n                });\n            }\n        }\n\n        return output;\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport allClassesInitialized from \"../classes/allClassesInitialized\";\nimport GameState from \"../gameState\";\nimport { AllModifiers } from \"../modifiers/allModifiers\";\nimport Stats from \"../stats/stats\";\n\nconst EXP_LEVEL_EXPONENT = new Decimal('2');\nconst BASE_EXP = new Decimal(2);\n\n\nexport interface ClassModifierData {\n    classId: AllClasses;\n    level?: Decimal | string,\n    experience?: Decimal | string,\n    statMultiplier?: number\n}\n\nexport default class ClassModifier {\n    classId: AllClasses\n    level: Decimal\n    experience: Decimal\n    statMultiplier: number\n\n    constructor(data: ClassModifierData) {\n        this.classId = data.classId;\n        this.level = data.level ? new Decimal(data.level) : new Decimal(0);\n        this.experience = data.experience ? new Decimal(data.experience) : new Decimal(0);\n        this.statMultiplier = data.statMultiplier ? data.statMultiplier : 1;\n    }\n\n    getName() {\n        return allClassesInitialized[this.classId].name;\n    }\n\n    getModifiedStats(gameState: GameState) {\n        const baseStats = allClassesInitialized[this.classId].levelUpStats.multiplyAllStats(this.statMultiplier);\n        return gameState.modifierManager.modifyStats(baseStats, AllModifiers.statGain);\n    }\n\n    getExperienceRequiredToLevel() {\n        return BASE_EXP.times(this.level.plus(1).pow(EXP_LEVEL_EXPONENT));\n    }\n\n    getNumberOfLevelsToGrow() {\n        const levelToGrowTo = this.experience.div(BASE_EXP).pow(new Decimal(1).div(EXP_LEVEL_EXPONENT)).floor();\n        return levelToGrowTo.minus(this.level);\n    }\n\n    addExperience(experience: Decimal) {\n        this.experience = this.experience.plus(experience);\n    }\n\n    levelUp(playerStats: Stats, gameState: GameState, numberOfLevelUps = new Decimal(1)) {\n        playerStats.addStats(this.getModifiedStats(gameState).multiplyAllStatsValue(numberOfLevelUps));\n        this.level = this.level.plus(numberOfLevelUps);\n    }\n\n    checkForLevelUp(playerStats: Stats, gameState: GameState) {\n        const numberOfLevelsToGrow = this.getNumberOfLevelsToGrow();\n        if (numberOfLevelsToGrow.greaterThanOrEqualTo(1)) {\n            this.levelUp(playerStats, gameState, numberOfLevelsToGrow);\n        }\n\n    }\n}","import Decimal from \"decimal.js\";\nimport Stats from \"../stats/stats\";\nimport { StatTypes } from \"../stats/statsEnum\";\nimport { AllZones } from \"../zones/allZones\";\nimport allZonesInitialized from \"../zones/allZonesInitialized\";\n\nexport interface ZoneModifierData {\n    zoneId: AllZones;\n    removeRequirements?: boolean;\n    minExp?: Decimal | string;\n    maxExp?: Decimal | string;\n    statIncrementalMultiplier?: Decimal | string;\n    rate?: number;\n}\n\nexport default class ZoneModifier {\n    zoneId: AllZones;\n    removeRequirements: boolean;\n    minExp: Decimal;\n    maxExp: Decimal;\n    statIncrementalMultiplier: Decimal;\n    rate: number;\n\n    constructor(data: ZoneModifierData) {\n        this.zoneId = data.zoneId;\n        this.removeRequirements = !!data.removeRequirements;\n        this.minExp = data.minExp ? new Decimal(data.minExp) : new Decimal(1);\n        this.maxExp = data.maxExp ? new Decimal(data.maxExp) : new Decimal(1);\n        this.statIncrementalMultiplier = data.statIncrementalMultiplier ? new Decimal(data.statIncrementalMultiplier) : new Decimal(1);\n        this.rate = data.rate ? data.rate : 1;\n    }\n\n    getName() {\n        return allZonesInitialized[this.zoneId].name;\n    }\n\n    getRate() {\n        return allZonesInitialized[this.zoneId].rate * this.rate;\n    }\n\n    getModifiedMinExp() {\n        return allZonesInitialized[this.zoneId].minExp.times(this.minExp)\n    }\n\n    getModifiedMaxExp() {\n        return allZonesInitialized[this.zoneId].maxExp.times(this.maxExp);\n    }\n\n    getStats() {\n        return allZonesInitialized[this.zoneId].requiredStats;\n    }\n\n    getExperienceReward(playerStats: Stats): Decimal {\n        const originalZone = allZonesInitialized[this.zoneId];\n        const modifiedMinExp = this.getModifiedMinExp();\n        const modifiedMaxExp = this.getModifiedMaxExp();\n        const modifiedStatMultiplier = originalZone.statIncrementalMultiplier.times(this.statIncrementalMultiplier);\n\n        if (originalZone.zoneKeyStats.length > 0) {\n            let keyStat: StatTypes;\n            let expMultiplier = new Decimal(1);\n            const maxMultiplierPerStat = modifiedMaxExp.div(modifiedMinExp).div(originalZone.zoneKeyStats.length);\n            for (keyStat of originalZone.zoneKeyStats) {\n                const playerStat = playerStats.get(keyStat);\n                const requiredStat = originalZone.requiredStats.get(keyStat).times(modifiedStatMultiplier);\n                const singleStatMultiplier = Decimal.min(playerStat.dividedBy(requiredStat).minus(1), maxMultiplierPerStat);\n                expMultiplier = expMultiplier.plus(singleStatMultiplier);\n            }\n            return Decimal.min(modifiedMaxExp, Decimal.max(modifiedMinExp.times(expMultiplier), modifiedMinExp));\n        } else {\n            let keyStat: StatTypes;\n            let expMultiplier = new Decimal(1);\n            const maxMultiplierPerStat = modifiedMaxExp.div(modifiedMinExp).div(Object.keys(StatTypes).length);\n            for (keyStat of Object.values(StatTypes)) {\n                const playerStat = playerStats.get(keyStat);\n                const requiredStat = originalZone.requiredStats.get(keyStat).times(modifiedStatMultiplier);\n                const singleStatMultiplier = Decimal.min(playerStat.dividedBy(requiredStat).minus(1), maxMultiplierPerStat);\n                expMultiplier = expMultiplier.plus(singleStatMultiplier);\n            }\n            return Decimal.min(modifiedMaxExp, Decimal.max(modifiedMinExp.times(expMultiplier), modifiedMinExp));\n        }\n    }\n}","import Decimal from \"decimal.js\";\nimport { AllBosses } from \"../battle/bosses/allBosses\";\nimport { AllClasses } from \"../classes/allClasses\";\nimport GameState from \"../gameState\";\nimport { AllModifiers } from \"../modifiers/allModifiers\";\nimport Stats, { StatsData } from \"../stats/stats\";\nimport { AllZones } from \"../zones/allZones\";\nimport ClassModifier, { ClassModifierData } from \"./classModifier\";\nimport ZoneModifier, { ZoneModifierData } from \"./zoneModifier\";\n\nexport type ActiveClasses = Array<AllClasses>;\n\nexport type UnlockedClasses = Array<AllClasses>\n\nexport type DiscoveredZones = Array<AllZones>\n\nexport type ClassModifiers = {\n    [key in AllClasses]?: ClassModifier\n}\n\nexport type ClassModifiersData = {\n    [key in AllClasses]?: ClassModifier | ClassModifierData\n}\n\nexport type ZoneModifiers = {\n    [key in AllZones]?: ZoneModifier\n}\n\nexport type ZoneModifiersData = {\n    [key in AllZones]?: ZoneModifier | ZoneModifierData\n}\n\nexport interface PlayerData {\n    activeClassLimit: number;\n    activeClasses: ActiveClasses;\n    unlockedClasses: UnlockedClasses;\n    classModifiers?: ClassModifiers | ClassModifiersData;\n    activeZone?: AllZones;\n    discoveredZones: DiscoveredZones;\n    zoneModifiers?: ZoneModifiers | ZoneModifiersData;\n    stats: Stats | StatsData;\n    lastBossDefeated?: AllBosses\n}\n\nexport default class Player {\n    activeClassLimit: number;\n    activeClasses: ActiveClasses;\n    unlockedClasses: UnlockedClasses;\n    classModifiers: ClassModifiers;\n    activeZone: AllZones | undefined;\n    discoveredZones: DiscoveredZones;\n    zoneModifiers: ZoneModifiers;\n    stats: Stats;\n    lastBossDefeated: AllBosses | undefined;\n\n    constructor(data: PlayerData) {\n        this.activeClassLimit = data.activeClassLimit;\n        this.activeClasses = [...data.activeClasses];\n        this.unlockedClasses = [...data.unlockedClasses];\n        this.classModifiers = this.loadClassModifiers(data.classModifiers);\n        this.activeZone = data.activeZone;\n        this.discoveredZones = [...data.discoveredZones];\n        this.zoneModifiers = this.loadZoneModifiers(data.zoneModifiers);\n        this.stats = new Stats(data.stats);\n        this.lastBossDefeated = data.lastBossDefeated;\n    }\n\n    getZoneModifier(zoneId: AllZones) {\n        let zoneModifier = this.zoneModifiers[zoneId];\n        if (!zoneModifier) {\n            zoneModifier = new ZoneModifier({ zoneId: zoneId });\n        }\n\n        return zoneModifier;\n    }\n\n    getClassModifier(classId: AllClasses) {\n        let classModifier = this.classModifiers[classId];\n        if (!classModifier) {\n            classModifier = new ClassModifier({ classId });\n            this.classModifiers[classId] = classModifier;\n        }\n\n        return classModifier;\n    }\n\n    setStats(stats: Stats) {\n        this.stats = stats;\n    }\n\n    unlockZone(zoneId: AllZones) {\n        if (this.discoveredZones.indexOf(zoneId) < 0) {\n            this.discoveredZones.push(zoneId);\n        }\n    }\n\n    unlockClass(playerClassId: AllClasses) {\n        if (this.unlockedClasses.indexOf(playerClassId) < 0) {\n            this.unlockedClasses.push(playerClassId);\n        }\n    }\n\n    getActiveZone() {\n        if (this.activeZone) {\n            if (this.discoveredZones.indexOf(this.activeZone) >= 0) {\n                return this.getZoneModifier(this.activeZone);\n            }\n        }\n\n        return undefined;\n    }\n\n    makeClassActive(playerClassId: AllClasses) {\n        if (this.activeClassLimit > this.activeClasses.length) {\n            this.activeClasses.push(playerClassId);\n        } else {\n            this.activeClasses.shift();\n            this.activeClasses.push(playerClassId);\n        }\n    }\n\n    addExperienceToActiveClasses(gameState: GameState) {\n        if (this.activeZone) {\n            const zoneModifier = this.getZoneModifier(this.activeZone);\n            const expReward = zoneModifier.getExperienceReward(this.stats);\n            const modifiedExpReward = gameState.modifierManager.modifyDecimal(expReward, AllModifiers.experienceGain);\n            this.activeClasses.forEach(playerClassId => {\n                const classModifier = this.getClassModifier(playerClassId);\n                classModifier.addExperience(modifiedExpReward);\n                classModifier.checkForLevelUp(this.stats, gameState);\n            });\n        }\n    }\n\n    makeZoneActive(zoneId: AllZones) {\n        this.activeZone = zoneId;\n        return zoneId;\n    }\n\n    getTotalLevel(): Decimal {\n        let output = new Decimal(0);\n        let key: keyof typeof AllClasses;\n        for (key in this.classModifiers) {\n            const classModifier = this.classModifiers[key];\n            if (classModifier) {\n                output = output.plus(classModifier.level);\n            }\n        }\n\n        return output;\n    }\n\n    loadClassModifiers(classModifiersData?: ClassModifiersData): ClassModifiers {\n        const output: ClassModifiers = {};\n\n        if (classModifiersData) {\n            let key: keyof typeof AllClasses;\n            for (key in classModifiersData) {\n                const classModifierData = classModifiersData[key];\n                if (classModifierData) {\n                    output[key] = new ClassModifier(classModifierData);\n                }\n            }\n        }\n\n        return output;\n    }\n\n    loadZoneModifiers(zoneModifiersData?: ZoneModifiersData): ZoneModifiers {\n        const output: ZoneModifiers = {};\n\n        if (zoneModifiersData) {\n            let key: keyof typeof AllZones;\n            for (key in zoneModifiersData) {\n                const zoneModifier = zoneModifiersData[key];\n                if (zoneModifier) {\n                    output[key] = new ZoneModifier(zoneModifier);\n                }\n            }\n        }\n\n        return output;\n    }\n}","import { AllZones } from \"../../zones/allZones\";\n\nconst initialDiscoveredZones = [\n    AllZones.strawberryValleyFields\n]\n\nexport default initialDiscoveredZones;","import Stats from \"../../stats/stats\";\nimport { StatTypes } from \"../../stats/statsEnum\";\n\nconst initialPlayerStats = new Stats({\n    [StatTypes.strength]: '5',\n    [StatTypes.toughness]: '5',\n    [StatTypes.dexterity]: '5',\n    [StatTypes.intelligence]: '5',\n    [StatTypes.wisdom]: '5',\n    [StatTypes.charisma]: '5',\n});\n\nexport default initialPlayerStats;","import { AllClasses } from \"../../classes/allClasses\";\n\nconst initialUnlockedClasses = [\n    AllClasses.warrior,\n    AllClasses.mage,\n    AllClasses.defender,\n    AllClasses.healer,\n    AllClasses.bard,\n    AllClasses.rogue\n]\n\nexport default initialUnlockedClasses;","import Player from \"../../player/player\";\nimport Stats from \"../../stats/stats\";\nimport initialDiscoveredZones from \"./initialDiscoveredZones\";\nimport initialPlayerStats from \"./initialPlayerStats\";\nimport initialUnlockedClasses from \"./initialUnlockedClasses\";\n\nconst initialPlayer = new Player({\n    activeClassLimit: 1,\n    activeClasses: [],\n    unlockedClasses: [\n        ...initialUnlockedClasses\n    ],\n    discoveredZones: [\n        ...initialDiscoveredZones\n    ],\n    stats: new Stats(initialPlayerStats),\n});\n\nexport default initialPlayer;","import { AllPrestigeSkills } from \"../allPrestigeSkills\";\nimport ImprovedLearningPrestigeSkill from \"./improvedLearning\";\nimport ImprovedTrainingPrestigeSkill from \"./improvedTraining\";\nimport PrestigeSkill, { PrestigeSkillData } from \"../prestigeSkill\";\nimport ImprovedConsolidatingPrestigeSkill from \"./improvedConsolidating\";\nimport MonkMasteryPrestigeSkill from \"./monkMastery\";\nimport UnlockDepravedDungeonPrestigeSkill from \"./unlockDepravedDungeon\";\nimport PrestigiousPrestigeSkill from \"./prestigious\";\nimport UnlockFleshWarperPrestigeSkill from \"./unlockFleshWarperPrestigeSkill\";\nimport AttackSpeedPrestigeSkill from \"./attackSpeedPrestigeSkill\";\nimport ImprovedConsolidatingTwoPrestigeSkill from \"./improvedConsolidatingTwo\";\n\nconst createPrestigeSkill = (prestigeSkill: PrestigeSkill | PrestigeSkillData) => {\n    switch (prestigeSkill.id) {\n        case AllPrestigeSkills.improvedConsolidating:\n            return new ImprovedConsolidatingPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.improvedConsolidatingTwo:\n            return new ImprovedConsolidatingTwoPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.improvedLearning:\n            return new ImprovedLearningPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.improvedTraining:\n            return new ImprovedTrainingPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.monkMastery:\n            return new MonkMasteryPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.unlockedDepravedDungeon:\n            return new UnlockDepravedDungeonPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.prestigious:\n            return new PrestigiousPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.unlockFleshWarper:\n            return new UnlockFleshWarperPrestigeSkill(prestigeSkill);\n        case AllPrestigeSkills.attackSpeed:\n            return new AttackSpeedPrestigeSkill(prestigeSkill);\n        default:\n            throw new Error(prestigeSkill.id + ' is not being handled in creator');\n    }\n}\n\nexport default createPrestigeSkill;","import Decimal from 'decimal.js';\nimport GameState from '../gameState';\nimport { AllModifiers } from '../modifiers/allModifiers';\nimport Player, { PlayerData } from '../player/player';\nimport initialPlayer from '../storage/state/initialPlayer';\nimport { AllPrestigeSkills } from './allPrestigeSkills';\nimport PrestigeSkill, { PrestigeSkillData } from './prestigeSkill';\nimport createPrestigeSkill from './prestigeSkills/prestigeSkillCreator';\n\nconst MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE = 300;\nconst STAT_MULTIPLIER_ON_PRESTIGE = .02;\n\nexport interface PrestigeData {\n    count?: number\n    points?: Decimal | string\n    pointsToGainOnNextPrestige?: Decimal | string\n    prestigeSkills?: Array<PrestigeSkill | PrestigeSkillData>\n    basePlayer?: Player | PlayerData\n}\n\nexport default class Prestige {\n    count: number;\n    points: Decimal;\n    pointsToGainOnNextPrestige: Decimal;\n    prestigeSkills: Array<PrestigeSkill>\n    basePlayer: Player;\n\n    constructor(data: PrestigeData) {\n        this.pointsToGainOnNextPrestige = data.pointsToGainOnNextPrestige ? new Decimal(data.pointsToGainOnNextPrestige) : new Decimal(0);\n        this.prestigeSkills = []\n        this.loadPrestigeSkills(data.prestigeSkills);\n        this.points = data.points ? new Decimal(data.points) : new Decimal(0);\n        this.count = data.count ? data.count : 0;\n        this.basePlayer = data.basePlayer ? new Player(data.basePlayer) : new Player(initialPlayer);\n    }\n\n    getPrestigeSkill(prestigeSkillId: AllPrestigeSkills) {\n        return this.prestigeSkills.find(prestigeSkillItem => {\n            if (prestigeSkillItem.id === prestigeSkillId) {\n                return true;\n            }\n\n            return false;\n        });\n    }\n\n    applyPrestigeSkills(gameState: GameState) {\n        this.prestigeSkills.forEach(prestigeSkill => {\n            prestigeSkill.applySkill(gameState)\n        });\n    }\n\n    unlockPrestigeSkill(prestigeSkill: PrestigeSkill) {\n        const prestigeSkillUnlocked = this.getPrestigeSkill(prestigeSkill.id);\n\n        if (!prestigeSkillUnlocked) {\n            this.prestigeSkills.push(prestigeSkill);\n        }\n    }\n\n    loadPrestigeSkills(prestigeSkills?: Array<PrestigeSkill | PrestigeSkillData>) {\n        if (!prestigeSkills) {\n            return;\n        }\n\n        for (const prestigeSkill of prestigeSkills) {\n            const createdPrestigeSkill = createPrestigeSkill(prestigeSkill)\n            this.unlockPrestigeSkill(createdPrestigeSkill);\n        }\n    }\n\n    addPoints(pointsToAdd: Decimal) {\n        this.pointsToGainOnNextPrestige = this.pointsToGainOnNextPrestige.add(pointsToAdd);\n    }\n\n    spendPoints(pointsToSpend: Decimal | number) {\n        if (this.points.greaterThanOrEqualTo(pointsToSpend)) {\n            this.points = this.points.minus(pointsToSpend);\n            return true;\n        }\n\n        return false;\n    }\n\n    getRequiredLevel() {\n        return MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE;\n    }\n\n    isPretigeAvailable(gameState: GameState) {\n        if (gameState.player.getTotalLevel().greaterThanOrEqualTo(MINIMUM_LEVEL_REQUIRED_TO_PRESTIGE)) {\n            return true;\n        }\n\n        return false;\n    }\n\n    getStatMultiplierOnPrestige(gameState: GameState) {\n        return gameState.modifierManager.modifyNumber(STAT_MULTIPLIER_ON_PRESTIGE, AllModifiers.prestigeStatsGain);\n    }\n\n    activatePrestige(gameState: GameState) {\n        if (this.isPretigeAvailable(gameState)) {\n            const statMultiplier = this.getStatMultiplierOnPrestige(gameState);\n            const gainedStats = gameState.player.stats.subtractStatsValue(this.basePlayer.stats);\n            this.basePlayer.stats.addStats(gainedStats.multiplyAllStatsValue(statMultiplier));\n            this.count = this.count + 1;\n            this.points = this.points.plus(this.pointsToGainOnNextPrestige);\n            this.pointsToGainOnNextPrestige = new Decimal(0);\n            const newPlayer = new Player(this.basePlayer);\n            gameState.setPlayer(newPlayer);\n            this.applyPrestigeSkills(gameState);\n        }\n    }\n}","import Decimal from 'decimal.js';\nimport Battle, { BattleData } from './battle/battle';\nimport History, { HistoryData } from './history/history';\nimport unlockAllUnlockables from './loopFunctions/unlockables/allUnlockables';\nimport ModifierManager, { ModifierManagerData } from './modifiers/modifierManager';\nimport Player, { PlayerData } from './player/player';\nimport Prestige, { PrestigeData } from './prestige/prestige';\n\nexport const BASE_GAME_TOPIC = 'gameState';\nexport const GAME_LOOP_TOPIC = BASE_GAME_TOPIC + '.gameLoop';\n\nexport type GameLoopData = {\n    frameTime: number,\n    gameState: GameState\n}\n\nexport type GameLoopFunction = (message: string, data: GameLoopData) => void\nexport type ExecutableLoopFunction = (data: GameLoopData) => void\n\nexport type LoopSubscriptions = {\n    [key in string]: {\n        timeInterval?: number,\n        executableLoopFunction: ExecutableLoopFunction,\n        timeSinceLastExecution: number,\n    }\n}\n\nexport interface GameStateData {\n    player: Player | PlayerData;\n    prestige: Prestige | PrestigeData;\n    fps?: number;\n    lastExecutionTime?: number;\n    history?: History | HistoryData;\n    modifierManager?: ModifierManager | ModifierManagerData\n}\n\nexport default class GameState {\n    player: Player;\n    prestige: Prestige;\n    fps: number;\n    lastExecutionTime: number | undefined;\n    loopSubscriptions: LoopSubscriptions;\n    battle: Battle | undefined;\n    history: History;\n    modifierManager: ModifierManager\n\n\n    constructor(data: GameStateData) {\n        this.player = new Player(data.player);\n        this.prestige = new Prestige(data.prestige);\n        this.fps = data.fps ? data.fps : 30;\n        this.lastExecutionTime = undefined;\n        this.loopSubscriptions = {};\n        this.history = data.history ? new History(data.history) : new History({});\n        this.modifierManager = data.modifierManager ? new ModifierManager(data.modifierManager) : new ModifierManager({});\n        this.prestige.applyPrestigeSkills(this);\n        unlockAllUnlockables({\n            frameTime: 0,\n            gameState: this\n        });\n        /*\n        this.prestige.count = 50;\n        this.prestige.points = new Decimal(100);\n        */\n    }\n\n    setPlayer(player: Player) {\n        this.player = player;\n    }\n\n    addLoopSubscription(id: string, executableLoopFunction: ExecutableLoopFunction, timeInterval?: number) {\n        this.loopSubscriptions[id] = {\n            timeInterval: timeInterval,\n            executableLoopFunction: executableLoopFunction,\n            timeSinceLastExecution: 0,\n        }\n    }\n\n    removeSubscriptions(ids: string[]) {\n        for (const id of ids) {\n            if (this.loopSubscriptions[id]) {\n                delete this.loopSubscriptions[id];\n            }\n        }\n    }\n\n    executeLoopFunction(id: string, data: GameLoopData) {\n        const loopSubscription = this.loopSubscriptions[id];\n        if (loopSubscription) {\n            if (loopSubscription.timeInterval) {\n                loopSubscription.timeSinceLastExecution += data.frameTime;\n                if (loopSubscription.timeSinceLastExecution / 1000 >= loopSubscription.timeInterval) {\n                    loopSubscription.executableLoopFunction(data);\n                    loopSubscription.timeSinceLastExecution = 0;\n                }\n            } else {\n                loopSubscription.executableLoopFunction(data);\n            }\n        }\n    }\n\n    gameLoop(executionTime: number) {\n        let frameTime = 0;\n        if (this.lastExecutionTime) {\n            frameTime = executionTime - this.lastExecutionTime;\n        }\n        const gameLoopData: GameLoopData = {\n            gameState: this,\n            frameTime: frameTime\n        }\n        Object.keys(this.loopSubscriptions).forEach(key => {\n            this.executeLoopFunction(key, gameLoopData);\n        });\n        this.lastExecutionTime = executionTime;\n    }\n}","import Player from \"../../player/player\";\nimport Prestige from \"../../prestige/prestige\";\nimport initialPlayer from \"./initialPlayer\";\n\nconst defaultGameState = {\n    player: new Player(initialPlayer),\n    prestige: new Prestige({})\n}\n\nexport default defaultGameState;","import { createContext } from \"react\";\nimport GameState from \"../game/gameState\";\nimport defaultGameState from \"../game/storage/state/initialGameState\";\n\nconst GameContext = createContext({\n    gameState: new GameState(defaultGameState),\n    lastFrameTime: performance.now()\n});\nexport default GameContext;","import { Progress } from \"antd\";\nimport { useContext } from \"react\";\nimport GameContext from \"../gameContext\";\n\nexport type GameLoopProgressData = {\n    gameLoopId: string,\n    rate?: number\n}\n\n\nexport default function GameLoopProgress({ gameLoopId, rate }: GameLoopProgressData) {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n\n    const getPercentageUntilNextExecution = () => {\n        if (gameState.loopSubscriptions[gameLoopId] && rate) {\n            const timeDifference = gameState.loopSubscriptions[gameLoopId].timeSinceLastExecution / 1000;\n            return timeDifference / rate * 100;\n        }\n\n        return 0;\n\n    }\n\n    return (\n        <Progress percent={getPercentageUntilNextExecution()} showInfo={false} />\n    )\n}","export default function toCapitalizedWords(name?: string, empty = 'Unknown') {\n    if (!name) {\n        return empty;\n    }\n    var words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n    return words.map(capitalize).join(\" \");\n}\n\nfunction capitalize(word: string) {\n    return word.charAt(0).toUpperCase() + word.substring(1);\n}","import { Avatar, Button, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport { GiBrainTentacle, GiBrute, GiCharacter, GiSpectre } from \"react-icons/gi\";\nimport Battle from \"../game/battle/battle\";\nimport { AllBosses } from \"../game/battle/bosses/allBosses\";\nimport getNextBossId from \"../game/battle/bosses/bossFightOrder\";\nimport initializeBoss from \"../game/battle/bosses/initializeBoss\";\nimport { BOSS_ATTACK_LOOP_ID, PLAYER_ATTACK_LOOP_ID } from \"../game/loopFunctions/battle/battleEntityAttack\";\nimport GameLoopProgress from \"./components/gameLoopProgress\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nconst bossIconMap = {\n    [AllBosses.brute]: (<GiBrute />),\n    [AllBosses.spectre]: (<GiSpectre />),\n    [AllBosses.brain]: (<GiBrainTentacle />),\n}\n\nexport default function BossBattle() {\n    const appState = useContext(GameContext);\n    const battle = appState.gameState.battle;\n    const nextBossId = getNextBossId(appState.gameState);\n\n    function createPlayerDisplay(bossBattle: Battle) {\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>Player</Typography.Title>\n                <Avatar size=\"large\" icon={<GiCharacter />} />\n                <GameLoopProgress gameLoopId={PLAYER_ATTACK_LOOP_ID} rate={bossBattle.player.attackInterval} />\n                <Typography.Text>HP: {bossBattle.player.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {bossBattle.player.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {bossBattle.player.defenseValue.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function createBossDisplay(bossBattle: Battle) {\n        const bossIcon = bossIconMap[bossBattle.boss.id];\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>{toCapitalizedWords(bossBattle.boss.name, 'Boss')}</Typography.Title>\n                <Avatar size=\"large\" icon={bossIcon} />\n                <GameLoopProgress gameLoopId={BOSS_ATTACK_LOOP_ID} rate={bossBattle.boss.attackInterval} />\n                <Typography.Text>HP: {bossBattle.boss.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {bossBattle.boss.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {bossBattle.boss.defenseValue.toString()}</Typography.Text>\n                <Typography.Text>Reward:</Typography.Text>\n                <Typography.Text>Prestige Points: {bossBattle.boss.prestigePoints.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function createPreFightDisplay(bossId: AllBosses) {\n        const bossIcon = bossIconMap[bossId];\n        const boss = initializeBoss(bossId);\n        return (\n            <Space direction=\"vertical\">\n                <Typography.Title>{toCapitalizedWords(boss.name, 'Boss')}</Typography.Title>\n                <Avatar size=\"large\" icon={bossIcon} />\n                <Typography.Text>HP: {boss.hp.toString()}</Typography.Text>\n                <Typography.Text>Attack: {boss.attackValue.toString()}</Typography.Text>\n                <Typography.Text>Defense: {boss.defenseValue.toString()}</Typography.Text>\n                <Typography.Text>Player Attack Stat: {boss.playerAttackStat}</Typography.Text>\n                <Typography.Text>Player Defense Stat: {boss.playerDefenseStat}</Typography.Text>\n                <Typography.Text>Reward:</Typography.Text>\n                <Typography.Text>Prestige Points: {boss.prestigePoints.toString()}</Typography.Text>\n            </Space>\n        )\n    }\n\n    function startFightClickHandler() {\n        if (nextBossId) {\n            appState.gameState.battle = new Battle({\n                bossId: nextBossId,\n                gameState: appState.gameState\n            });\n        }\n    }\n\n    const createBattleDisplay = () => {\n        if (battle) {\n            return (\n                <Space direction=\"horizontal\">\n                    {createPlayerDisplay(battle)}\n                    {createBossDisplay(battle)}\n                </Space>\n            )\n        }\n\n        if (nextBossId) {\n            return createPreFightDisplay(nextBossId);\n\n        }\n\n        return (\n            <Typography.Text>No more bosses left to fight</Typography.Text>\n        )\n    }\n\n    const fightButtonDisabled = battle || !nextBossId ? true : false;\n\n    return (\n        <Space direction=\"vertical\">\n            <Button onClick={startFightClickHandler} disabled={fightButtonDisabled}>Start Fight</Button>\n            {createBattleDisplay()}\n        </Space>\n    )\n}","import { Col, Divider, List, Row, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport { AllClasses } from \"../game/classes/allClasses\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nexport default function ClassPicker() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n    const player = gameState.player;\n\n    const createChangeActiveClassHandler = (classId: AllClasses) => {\n        return () => {\n            return player.makeClassActive(classId);\n        }\n    }\n\n    const generateClassListItem = (classId: AllClasses) => {\n        const classModifier = player.getClassModifier(classId);\n        return (\n            <List.Item key={'unlocked-' + classId} onClick={createChangeActiveClassHandler(classId)} style={{ display: 'block' }}>\n                <Typography.Title>{toCapitalizedWords(classModifier.getName(), 'Select a class to make active')}</Typography.Title>\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Level: {classModifier.level.toString()}</Typography.Text>\n                            <Typography.Text>Experience: {classModifier.experience.toString()}</Typography.Text>\n                            <Typography.Text>Experience to Level: {classModifier.getExperienceRequiredToLevel().toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Strength: {classModifier.getModifiedStats(gameState).strength.toString()}</Typography.Text>\n                            <Typography.Text>Toughness: {classModifier.getModifiedStats(gameState).toughness.toString()}</Typography.Text>\n                            <Typography.Text>Dexterity: {classModifier.getModifiedStats(gameState).dexterity.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Intelligence: {classModifier.getModifiedStats(gameState).intelligence.toString()}</Typography.Text>\n                            <Typography.Text>Wisdom: {classModifier.getModifiedStats(gameState).wisdom.toString()}</Typography.Text>\n                            <Typography.Text>Charisma: {classModifier.getModifiedStats(gameState).charisma.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                </Row>\n                <Divider />\n            </List.Item>\n        )\n    }\n\n    const generateActiveClassesDisplay = () => {\n        return player.activeClasses.map((classId) => {\n            const classModifier = player.getClassModifier(classId);\n            return (\n                <Typography.Title key={'active-' + classId} level={2}>{toCapitalizedWords(classModifier.getName(), 'Select a class to make active')} {classModifier.level.toString()}</Typography.Title>\n            )\n        });\n    }\n\n    return (\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Divider>Active Classes ({player.activeClasses.length}/{player.activeClassLimit})</Divider>\n            {generateActiveClassesDisplay()}\n            <Divider>Unlocked Classes</Divider>\n            <List\n                dataSource={player.unlockedClasses}\n                renderItem={item => generateClassListItem(item)}\n                size=\"large\"\n                bordered\n                itemLayout=\"vertical\"\n            />\n        </Space>\n    )\n}","import { useContext } from \"react\";\nimport GameContext from \"./gameContext\";\nimport { Avatar, Button, Divider, List, Space, Typography } from \"antd\";\nimport { AllPrestigeSkills } from \"../game/prestige/allPrestigeSkills\";\nimport { GiAura, GiDungeonGate, GiFleshyMass, GiJumpingRope, GiKimono, GiRead, GiRedCarpet, GiSpeedometer } from \"react-icons/gi\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\nimport PrestigeSkill from \"../game/prestige/prestigeSkill\";\n\nconst PRESTIGE_SKILL_ICON_MAP = {\n    [AllPrestigeSkills.improvedConsolidating]: (<GiAura />),\n    [AllPrestigeSkills.improvedLearning]: (<GiRead />),\n    [AllPrestigeSkills.improvedTraining]: (<GiJumpingRope />),\n    [AllPrestigeSkills.monkMastery]: (<GiKimono />),\n    [AllPrestigeSkills.unlockedDepravedDungeon]: (<GiDungeonGate />),\n    [AllPrestigeSkills.prestigious]: (<GiRedCarpet />),\n    [AllPrestigeSkills.unlockFleshWarper]: (<GiFleshyMass />),\n    [AllPrestigeSkills.attackSpeed]: (<GiSpeedometer />),\n    [AllPrestigeSkills.improvedConsolidatingTwo]: (<GiAura color=\"blue\" />),\n}\n\nexport default function PrestigeActivation() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n    const player = gameState.player;\n    const prestige = gameState.prestige;\n\n    const prestigeClick = () => {\n        prestige.activatePrestige(gameState);\n    }\n\n    const createPrestigeSkillClickHandler = (prestigeSkill: PrestigeSkill) => {\n        return () => {\n            prestigeSkill.increaseLevel(gameState);\n        }\n    }\n\n    const createPrestigeSkillGrid = () => {\n        if (!prestige.prestigeSkills.length) {\n            return null;\n        }\n\n        return (\n            <List\n                grid={{\n                    gutter: 16,\n                }}\n                dataSource={prestige.prestigeSkills}\n                renderItem={prestigeSkill => (\n                    <List.Item onClick={createPrestigeSkillClickHandler(prestigeSkill)}>\n                        <Space direction=\"vertical\">\n                            <Avatar size=\"large\" icon={PRESTIGE_SKILL_ICON_MAP[prestigeSkill.id]}></Avatar>\n                            <Typography.Text>{toCapitalizedWords(prestigeSkill.name)}</Typography.Text>\n                            <Typography.Text>{prestigeSkill.currentLevel}/{prestigeSkill.maxLevel}</Typography.Text>\n                            <Typography.Text>Cost: {prestigeSkill.cost}</Typography.Text>\n                        </Space>\n                    </List.Item>\n                )}\n            />\n        )\n    }\n\n    return (\n        <Space direction=\"vertical\">\n            <Typography.Text>Prestige Points: {prestige.points.toString()}</Typography.Text>\n            <Typography.Text>You must reach a high enough level to prestige: {player.getTotalLevel().toString()}/{prestige.getRequiredLevel().toString()}</Typography.Text>\n            <Typography.Text>{prestige.getStatMultiplierOnPrestige(gameState) * 100}% of your gained stats will be added to your base stats on reset</Typography.Text>\n            <Typography.Text>You will lose discovered zones</Typography.Text>\n            <Typography.Text>You will lose unlocked classes</Typography.Text>\n            <Typography.Text>Points gained on prestige: {prestige.pointsToGainOnNextPrestige.toString()}</Typography.Text>\n            <Button disabled={!prestige.isPretigeAvailable(gameState)} onClick={prestigeClick}>Prestige</Button>\n            <Typography.Text>Prestige Count: {prestige.count.toString()}</Typography.Text>\n            <Divider>Skills</Divider>\n            {createPrestigeSkillGrid()}\n        </Space>\n    )\n}","import GameState from \"../gameState\";\n\nexport const GAME_SAVE_KEY = 'iliumIdleClasser';\n\nexport default function saveGame(gameState: GameState) {\n    return saveGameToLocalStorage(gameState);\n}\n\nfunction saveGameToLocalStorage(gameState: GameState) {\n    window.localStorage.setItem(GAME_SAVE_KEY, JSON.stringify(gameState));\n}","import GameState, { GameStateData } from \"../gameState\";\nimport { GAME_SAVE_KEY } from \"./saveGame\";\nimport defaultGameState from \"./state/initialGameState\";\n\nexport const LOCAL_STORAGE_SAVE_TYPE = 'localStorage';\n\nexport default function loadGame(saveType = LOCAL_STORAGE_SAVE_TYPE) {\n    return loadGameFromLocalStorage();\n}\n\nfunction loadGameFromLocalStorage() {\n    const gameData = window.localStorage.getItem(GAME_SAVE_KEY);\n\n    if (gameData) {\n        try {\n            return new GameState(JSON.parse(gameData) as GameStateData);\n        } catch (err) {\n            console.log('Failed to load game state');\n            console.log(err);\n        }\n    }\n\n    return new GameState(defaultGameState);\n}","import { LOCAL_STORAGE_SAVE_TYPE } from \"./loadGame\";\nimport { GAME_SAVE_KEY } from \"./saveGame\";\n\nexport default function clearSavedGame(saveType = LOCAL_STORAGE_SAVE_TYPE) {\n    clearSavedGameFromLocalStorage();\n}\n\nfunction clearSavedGameFromLocalStorage() {\n    window.localStorage.removeItem(GAME_SAVE_KEY);\n}","import { Button, Space } from \"antd\";\nimport { useContext } from \"react\";\nimport clearSavedGame from \"../game/storage/clearSavedGame\";\nimport GameContext from \"./gameContext\";\n\nexport default function SettingsPanel() {\n    const appState = useContext(GameContext);\n\n    const clearSavedGameDataHandler = () => {\n        clearSavedGame();\n        window.location.reload();\n    }\n\n    return (\n        <Space direction=\"vertical\">\n            <Button onClick={clearSavedGameDataHandler}>Clear Saved Data</Button>\n        </Space>\n    )\n}","import { Divider, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport GameContext from \"./gameContext\";\n\nconst { Text } = Typography;\n\nexport default function StatsViewer() {\n    const appState = useContext(GameContext);\n    const player = appState.gameState.player;\n\n    const createStatsPanel = () => {\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Stats</Divider>\n                <Text>Strength: {player.stats.strength.toString()}</Text>\n                <Text>Toughness: {player.stats.toughness.toString()}</Text>\n                <Text>Dexterity: {player.stats.dexterity.toString()}</Text>\n                <Text>Wisdom: {player.stats.wisdom.toString()}</Text>\n                <Text>Intelligence: {player.stats.intelligence.toString()}</Text>\n                <Text>Charisma: {player.stats.charisma.toString()}</Text>\n            </Space>\n        );\n    }\n\n    const createLevelsPanel = () => {\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Levels</Divider>\n                <Text>Level: {player.getTotalLevel().toString()}</Text>\n                {Object.values(player.classModifiers).map(classModifier => {\n                    return (\n                        <Text key={'levels-' + classModifier.classId}>{toCapitalizedWords(classModifier.getName())} level: {classModifier.level.toString()}</Text>\n                    )\n                })}\n            </Space>\n        );\n    }\n\n    const createActivityPanel = () => {\n        const activeZoneName = player.activeZone ? toCapitalizedWords(player.activeZone) : 'No Active Zone';\n        return (\n            <Space direction=\"vertical\">\n                <Divider>Activity</Divider>\n                <Typography.Title level={5}>Active Zone: {activeZoneName}</Typography.Title>\n                <Typography.Title level={5}>Active Classes</Typography.Title>\n                {player.activeClasses.map(classId => {\n                    const classModifier = player.getClassModifier(classId);\n                    return (\n                        <Text key={'activity-' + classId}>{toCapitalizedWords(classModifier.getName())} - {classModifier.level.toString()} - ({classModifier.experience.toString()}/{classModifier.getExperienceRequiredToLevel().toString()})</Text>\n                    )\n                })}\n            </Space>\n        );\n    }\n\n    function toCapitalizedWords(name: string) {\n        var words = name.match(/[A-Za-z][a-z]*/g) || [];\n\n        return words.map(capitalize).join(\" \");\n    }\n\n    function capitalize(word: string) {\n        return word.charAt(0).toUpperCase() + word.substring(1);\n    }\n\n    return (\n        <Space direction=\"horizontal\">\n            {createStatsPanel()}\n            {createLevelsPanel()}\n            {createActivityPanel()}\n        </Space>\n    )\n}","import { GameLoopData } from \"../../gameState\";\n\nexport const ZONE_LOOP_ID = \"zone\";\n\nexport default function gainRewards(data: GameLoopData) {\n    console.log(data);\n    data.gameState.player.addExperienceToActiveClasses(data.gameState);\n}","import { Col, Divider, List, Row, Space, Typography } from \"antd\";\nimport { useContext } from \"react\";\nimport gainRewards, { ZONE_LOOP_ID } from \"../game/loopFunctions/zones/gainRewards\";\nimport { AllZones } from \"../game/zones/allZones\";\nimport GameLoopProgress from \"./components/gameLoopProgress\";\nimport GameContext from \"./gameContext\";\nimport toCapitalizedWords from \"./helpers/capitalizeAndAddSpacing\";\n\nexport default function ZonePicker() {\n    const appState = useContext(GameContext);\n    const gameState = appState.gameState;\n\n    const createSetActiveZoneHandler = (zoneId: AllZones) => {\n        return () => {\n            gameState.player.makeZoneActive(zoneId);\n            gameState.addLoopSubscription(ZONE_LOOP_ID, gainRewards, gameState.player.getZoneModifier(zoneId).getRate());\n        }\n    }\n\n    const generateZoneListItem = (zoneId: AllZones) => {\n        const zoneModifier = gameState.player.getZoneModifier(zoneId);\n        return (\n            <List.Item onClick={createSetActiveZoneHandler(zoneId)} style={{ display: 'block' }}>\n                <Typography.Title>{toCapitalizedWords(zoneModifier.getName())}</Typography.Title>\n                <Row gutter={16}>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Time to Complete: {zoneModifier.getRate().toString()}s</Typography.Text>\n                            <Typography.Text>Minimum Exp Reward: {zoneModifier.getModifiedMinExp().toString()}</Typography.Text>\n                            <Typography.Text>Maximum Exp Reward: {zoneModifier.getModifiedMaxExp().toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Strength: {zoneModifier.getStats().strength.toString()}</Typography.Text>\n                            <Typography.Text>Toughness: {zoneModifier.getStats().toughness.toString()}</Typography.Text>\n                            <Typography.Text>Dexterity: {zoneModifier.getStats().dexterity.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                    <Col span={8}>\n                        <Space direction=\"vertical\">\n                            <Typography.Text>Intelligence: {zoneModifier.getStats().intelligence.toString()}</Typography.Text>\n                            <Typography.Text>Wisdom: {zoneModifier.getStats().wisdom.toString()}</Typography.Text>\n                            <Typography.Text>Charisma: {zoneModifier.getStats().charisma.toString()}</Typography.Text>\n                        </Space>\n                    </Col>\n                </Row>\n                <Divider />\n            </List.Item>\n        )\n    }\n\n    return (\n        <Space direction=\"vertical\" style={{ width: '100%' }}>\n            <Typography.Title level={2}>{toCapitalizedWords(gameState.player.activeZone, 'Select a zone to make active')}</Typography.Title>\n            <GameLoopProgress gameLoopId={ZONE_LOOP_ID} rate={gameState.player.getActiveZone()?.getRate()} />\n            <List\n                dataSource={gameState.player.discoveredZones}\n                renderItem={item => generateZoneListItem(item)}\n                size=\"large\"\n                bordered\n                itemLayout=\"vertical\"\n            />\n        </Space>\n    )\n}","import { Layout, Menu } from 'antd';\nimport { useState } from 'react';\nimport { GiCharacter, GiSkills, GiWorld, GiUpgrade, GiCog, GiBossKey } from 'react-icons/gi';\nimport BossBattle from './bossBattle';\nimport ClassPicker from './classPicker';\nimport PrestigeActivation from './prestigeActivation';\nimport SettingsPanel from './settingsPanel';\nimport StatsViewer from './statsViewer';\nimport ZonePicker from './zonePicker';\n\nconst { Header, Content, Sider } = Layout;\n\nexport default function PageLayout() {\n    const [mainContent, setMainContent] = useState(<ClassPicker />);\n\n    const showClassPicker = () => {\n        setMainContent(<ClassPicker />);\n    }\n\n    const showStatsViewer = () => {\n        setMainContent(<StatsViewer />);\n    }\n\n    const showZonePicker = () => {\n        setMainContent(<ZonePicker />);\n    }\n\n    const showPrestigeActivation = () => {\n        setMainContent(<PrestigeActivation />);\n    }\n\n    const showSettingsPanel = () => {\n        setMainContent(<SettingsPanel />);\n    }\n\n    const showBossBattle = () => {\n        setMainContent(<BossBattle />);\n    }\n\n    return (\n        <Layout>\n            <Sider\n                style={{\n                    overflow: 'auto',\n                    height: '100vh',\n                    position: 'fixed',\n                    left: 0,\n                }}\n            >\n                <div className=\"logo\" />\n                <Menu theme=\"dark\" mode=\"inline\" defaultSelectedKeys={['1']}>\n                    <Menu.Item key=\"1\" onClick={showClassPicker} icon={<GiCharacter />}>\n                        Class\n                    </Menu.Item>\n                    <Menu.Item key=\"2\" onClick={showStatsViewer} icon={<GiSkills />}>\n                        Stats\n                    </Menu.Item>\n                    <Menu.Item key=\"3\" onClick={showZonePicker} icon={<GiWorld />}>\n                        Zone\n                    </Menu.Item>\n                    <Menu.Item key=\"4\" onClick={showPrestigeActivation} icon={<GiUpgrade />}>\n                        Prestige\n                    </Menu.Item>\n                    <Menu.Item key=\"5\" onClick={showBossBattle} icon={<GiBossKey />}>\n                        Boss\n                    </Menu.Item>\n                    <Menu.Item key=\"6\" onClick={showSettingsPanel} icon={<GiCog />}>\n                        Settings\n                    </Menu.Item>\n                </Menu>\n            </Sider>\n            <Layout className=\"site-layout\" style={{ marginLeft: 200 }}>\n                <Header className=\"site-layout-background\" style={{ padding: 0 }} />\n                <Content style={{ margin: '24px 16px 0', overflow: 'initial' }}>\n                    <div className=\"site-layout-background\" style={{ padding: 24, textAlign: 'center' }}>\n                        {mainContent}\n                    </div>\n                </Content>\n            </Layout>\n        </Layout>\n    )\n}","import { GameLoopData } from \"../../gameState\";\nimport saveGame from \"../../storage/saveGame\";\n\nexport const SAVE_GAME_LOOP_ID = 'saveGame';\n\nexport default function saveGameLoopFunction(data: GameLoopData) {\n    saveGame(data.gameState);\n}","import PageLayout from \"./ui/pageLayout\";\nimport \"./App.css\";\nimport React from \"react\";\nimport GameContext from \"./ui/gameContext\";\nimport useInterval from \"./useInterval\";\nimport unlockAllUnlockables, { UNLOCK_UNLOCKABLES_LOOP_ID } from \"./game/loopFunctions/unlockables/allUnlockables\";\nimport saveGameLoopFunction, { SAVE_GAME_LOOP_ID } from \"./game/loopFunctions/storage/saveGame\";\nimport loadGame from \"./game/storage/loadGame\";\nimport gainRewards, { ZONE_LOOP_ID } from \"./game/loopFunctions/zones/gainRewards\";\nimport Decimal from \"decimal.js\";\n\nconst PRECISION_SIZE = 5;\nDecimal.config({ precision: PRECISION_SIZE });\n\nexport default function App() {\n  const [gameState, setGameState] = React.useState(loadGame());\n  const [lastFrameTime, setLastFrameTime] = React.useState(performance.now());\n\n  const appState = {\n    gameState,\n    lastFrameTime\n  }\n\n  if (!gameState.loopSubscriptions[UNLOCK_UNLOCKABLES_LOOP_ID]) {\n    gameState.addLoopSubscription(UNLOCK_UNLOCKABLES_LOOP_ID, unlockAllUnlockables, 2);\n  }\n\n  if (!gameState.loopSubscriptions[SAVE_GAME_LOOP_ID]) {\n    gameState.addLoopSubscription(SAVE_GAME_LOOP_ID, saveGameLoopFunction, 5);\n  }\n\n  if (gameState.player.activeZone && !gameState.loopSubscriptions[ZONE_LOOP_ID]) {\n    gameState.addLoopSubscription(ZONE_LOOP_ID, gainRewards, gameState.player.getZoneModifier(gameState.player.activeZone).getRate());\n  }\n\n  useInterval(() => {\n    setLastFrameTime(performance.now());\n    gameState.gameLoop(lastFrameTime);\n  }, 1000 / gameState.fps);\n\n  return (\n    <GameContext.Provider value={appState}>\n      <PageLayout />\n    </GameContext.Provider>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}